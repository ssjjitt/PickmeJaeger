<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Maps.MapControl.WPF</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.DistanceUnit">
            <summary>
            Options for displaying scale bar distances. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.DistanceUnit.Default">
            <summary>
            Choose the distance unit based on the current region.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.DistanceUnit.MilesFeet">
            <summary>
            Use miles for long distances and feet for shorter distances.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.DistanceUnit.MilesYards">
            <summary>
            Use miles for long distances and yards for shorter ditances.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.DistanceUnit.KilometersMeters">
            <summary>
            Use kilometers for long distances and meters for shorter distances.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.Scale">
            <summary>
            Scale bar implemented as a user control.
            </summary>
            TODO: This might be better implemented as a ContentControl that can more easily be customized.  Or
            if it remains a UserControl, maybe a few more properties should be added to control the appearance
            such as a color for the scale bar.
            <remarks>
            An rounded number is chosen to display on the scale bar. The property MaxWidth is used to control
            the size of the bar.
            </remarks>
            <summary>
            Scale
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.MetersPerKm">
            <summary>
            Peters per kilometer
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.YardsPerMeter">
            <summary>
            Ajax control uses yards ... I like feet. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.YardsPerMile">
            <summary>
            Yards per mile
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.FeetPerYard">
            <summary>
            Feet per yard
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.FeetPerMeter">
            <summary>
            Feet per meter
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.FeetPerMile">
            <summary>
            Feet per mile
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.regionInfo">
            <summary>
            Region for default units. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.cultureInfo">
            <summary>
            CultureInfo for this control. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale._CurrentMetersPerPixel">
            <summary>
            Current meters per pixel ... use this if units change without moving the map.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale._PreviousMaxWidth">
            <summary>
            Previous max width.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.DistanceUnitProperty">
            <summary>
            Dependency property to set units to use.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.CultureProperty">
            <summary>
            Dependency property to set Culture if different than the current "system" culture.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.SetScaling(System.Double)">
            <summary>
            Update the scale bar based on the meters per pixel.
            </summary>
            <param name="metersPerPixel"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.SetScaling(System.Int32,System.String)">
            <summary>
            Low level routine that updates the display of the scale bar.
            </summary>
            <param name="pixels"></param>
            <param name="text"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.OnPerPixelChanged">
            <summary>
            Member that handles unit MetersPerPixel callback.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.OnUnitChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Static callback made when the units change.
            </summary>
            <param name="d">the scale bar object that was changed</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.OnUnitChanged">
            <summary>
            Member that handles unit changed callback.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.OnCultureChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Static callback made when the units change.
            </summary>
            <param name="d">the scale bar object that was changed</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.OnCultureChanged">
            <summary>
            Member that handles callback.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.singleDigitValues">
            <summary>
            Single digit values that can be returned.  Nust be in descending order. 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.GetSingleDigitValue(System.Double)">
            <summary>
            May not want to display odd numbers such as 3 miles.  Only display
            the values in the singleDigitValues array or default to 1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Scale.multiDigitValues">
            <summary>
            Double digit values that can be retuned.  These number will always be multipied
            by 10 or a power of 10.  Must be in descending order. 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.GetMultiDigitValue(System.Double,System.Double)">
            <summary>
            May not want to display odd numbers such as 18 miles.  Only display the values
            in the multiDigitValues array.
            </summary>
            <param name="value"></param>
            <param name="exponentOf10"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Scale.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.Scale.MetersPerPixel">
            <summary>
            MetersPerPixel used to display on the scale bar.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.Scale.DistanceUnit">
            <summary>
            Units used to display the scale bar.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.Scale.Culture">
            <summary>
            Culture ... return null here if its not set ... caller must handle null.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.WebServicesUtility">
            <summary>
            Helper class for consuming platform web services.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.WebServicesUtility.CreateImageryServiceClient(System.String)">
            <summary>
            Create ImageryServiceClient for calling imagery service.
            </summary>
            <param name="imageryServiceAddress"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.Logo">
            <summary>
            Code behind for the logo control.
            </summary>
            <summary>
            Logo
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Logo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Overlays.Logo"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Logo.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MercatorMode">
            <summary>
            Map mode that displays road imagery.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapMode">
            <summary>
            Defines a map mode.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.IProjectable">
            <summary>
            Represents an element that can be projected from normalized mercator space to viewport space, such as
            a MapMode or a MapLayer.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.IProjectable.SetView(System.Windows.Size,System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Sets the projectsion from normalized mercator to viewport space.
            </summary>
            <param name="viewportSize">The size of the viewport being projected to, in pixels.</param>
            <param name="normalizedMercatorToViewport">Transfrom from normalized mercator to viewport.</param>
            <param name="viewportToNormalizedMercator">Transform from viewport to normalized mercator.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapMode.Log2DuplicatePyramidCount">
            <summary>
            The log base 2 of the number of duplicate pyramids, replicated horizontally, are used to achieve
            world wrap
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapMode._Culture">
            <summary>
            String to describe market or locale, for example "en-us", "fr-fr", "es-es", "en-gb", etc.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapMode._SessionId">
            <summary>
            The Session Id to use
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapMode._TilePyramidRenderableCanvas">
            <summary>
            The canvas that used by the tile pyramid renderable.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapMode._TileSource">
            <summary>
            The tile source
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapMode._TilePyramidRenderable">
            <summary>
            The tile pyramid renderable
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapMode._CurrentMapInstance">
            <summary>
            The current map copy instance. The map that occupies Rect(0,0,1,1) in normalized mercator
            space is instance (0,0), the one to its east is (1,0), to the south is (0,1), and so on. Null
            if it has not yet been set.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapMode._TileWrap">
            <summary>
            The tile wrap of the map mode. Specifies how the map wraps in the horizontal and vertical dimensions.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MapMode"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.Microsoft#Maps#MapControl#WPF#IProjectable#SetView(System.Windows.Size,System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Sets the projectsion from normalized mercator to viewport space.
            </summary>
            <param name="viewportSize">The size of the viewport being projected to, in pixels.</param>
            <param name="normalizedMercatorToViewport">Transfrom from normalized mercator to viewport.</param>
            <param name="viewportToNormalizedMercator">Transform from viewport to normalized mercator.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.AsynchronousConfigurationLoadedSetViewCallback(Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection,System.Object)">
            <summary>
            Callback called when the config is fully loaded and we know we have the tile uris and can set the view reliably.
            </summary>
            <param name="config"></param>
            <param name="userState"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.SetViewImpl(System.Windows.Size,System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            SetView Implementation
            </summary>
            <param name="viewportSize"></param>
            <param name="normalizedMercatorToViewport"></param>
            <param name="viewportToNormalizedMercator"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.Detach">
            <summary>
            Detaches this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override the arrange pass.
            </summary>
            <param name="arrangeSize">The arrange bounds.</param>
            <returns>The resulting size.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.EnsureTileSource">
            <summary>
            Ensures that the tile source is initialized. We can't do this in the constructor because a derived class may not
            have initialized its configuration yet.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.RebuildTileSource">
            <summary>
            Forces a rebuild of the tile source
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.InitializeTileSource">
            <summary>
            Sets up the tile source and assigns it to the image pyramid
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.MapMode_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the MapMode.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode._TilePyramidRenderable_NeedsRender(System.Object,System.EventArgs)">
            <summary>
            Handles the NeedsRender event of _TilePyramidRenderable.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.InternalRender">
            <summary>
            The internal render method.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapMode.TryParseSubdomains(System.String,System.String[][]@)">
            <summary>
            Parses the subdomain string into a string[][]
            </summary>
            <param name="subdomainString">The subdomain string.</param>
            <param name="subdomains">The subdomains.</param>
            <returns>True if the subdomains were successfully parsed.</returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.TileWrap">
            <summary>
            Gets or sets the tile wrap of the map mode. Specifies how the map wraps in the horizontal and vertical dimensions.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.HasSomeTiles">
            <summary>
            Gets a value indicating whether this mode has enough tiles to cover meaningfull portion of the screen.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.ModeBackground">
            <summary>
            Gets whether or not the mode typically has a light or a dark background to choose
            coloring for overlay.  Nost of the modes have dark backgrounds so make it the default.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.MapStyle">
            <summary>
            Gets PlatformServices map style.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.MapMode.Rendered">
            <summary>
            Triggered when the map mode renders itself. Can be used to check if the status of the map mode has changed,
            like if it has downloaded tiles, gone idle, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.Culture">
            <summary>
            Gets or sets the string to describe market or locale, for example "en-us", "fr-fr", "es-es", "en-gb", etc.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.SessionId">
            <summary>
            Gets or sets the session to use
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.TileUriFormat">
            <summary>
            Gets the tile URI format.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.Subdomains">
            <summary>
            Gets the subdomains.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.ChooseLevelOfDetailSettings">
            <summary>
            Gets or sets the algorithm for determining tile download priority and display.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapMode.CurrentMapCopyInstance">
            <summary>
            Sets the current map copy instance. The map that occupies Rect(0,0,1,1) in normalized mercator
            space is instance (0,0), the one to its east is (1,0), to the south is (0,1), and so on.
            </summary>
            <value>
            The current map copy instance.
            </value>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapMode.SetViewParams">
            <summary>
            Private SetViewParams class to store the SetView State
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MercatorMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MercatorMode"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MercatorMode.AsynchronousConfigurationLoaded(Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection,System.Object)">
            <summary>
            Callback when configuration loads
            </summary>
            <param name="config"></param>
            <param name="userState"></param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MercatorMode.TileUriFormat">
            <summary>
            Gets the tile URI format.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MercatorMode.Subdomains">
            <summary>
            Gets the subdomains.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MercatorMode.ModeBackground">
            <summary>
            Tells whether or not the mode typically has a light or a dark background to choose
            coloring for overlay.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MercatorMode.MapStyle">
            <summary>
            Gets PlatformServices map style.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.Point2D">
            <summary>
            Describes and manipulates a point in two-dimensional space using doubles. Contains a subset of the functionality 
            of the original Vector2D, which may be found in Metropolis\Platform\Store\Geometry\VectorMath.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point2D.X">
            <summary>
            Represents the x component of the 2-D point.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point2D.Y">
            <summary>
            Represents the y component of the 2-D point.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.op_Addition(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Addition operator
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.op_Subtraction(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Subtraction operator
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.op_Multiply(System.Double,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Scaling operator
            </summary>
            <param name="scalar"></param>
            <param name="point"></param>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.Dot(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Get the dot product of the points.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.Normalize(Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Returns the normalized version of the specified 2-D point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.Length">
            <summary>
            Returns the length of the current 2-D point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.LengthSquared">
            <summary>
            Returns the square of the length of the current 2-D point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.DistanceSquared(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Returns the square of the distance between two points.
            Put another way, returns |pointA - pointB|.
            </summary>
            <param name="pointA"></param>
            <param name="pointB"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.Cross(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Returns the 2D cross product of two points.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.Lerp(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D,System.Double)">
            <summary>
            Linearly interpolate by alpha between points point0 and point1.
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.op_Equality(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Equality operator
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.op_Inequality(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Not equal operator
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.Equals(System.Object)">
            <summary>
            Override Equals method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point2D.GetHashCode">
            <summary>
            Ovverride GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.Pixel">
            <summary>
            A simple int X/Y structure
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pixel.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.Pixel"/> struct.
            </summary>
            <param name="x">The x-coord.</param>
            <param name="y">The y-coord.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pixel.op_Equality(Microsoft.Maps.MapExtras.Pixel,Microsoft.Maps.MapExtras.Pixel)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pixel.op_Inequality(Microsoft.Maps.MapExtras.Pixel,Microsoft.Maps.MapExtras.Pixel)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pixel.Equals(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pixel.GetHashCode">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pixel.ToString">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.Pixel.X">
            <summary>
            Gets the X coordinate.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.Pixel.Y">
            <summary>
            Gets the Y coordinate.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.Pool`2">
            <summary>
            Maintains a pool of objects, categorized in lists by the key type, TKey. The objects are
            automatically thrown out after some number of seconds.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Pool`2.SecondsBeforeRemoval">
            <summary>
            The number of seconds that an item stays in the pool before it is automatically
            purged.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pool`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.Pool`2"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pool`2.Add(`0,`1)">
            <summary>
            Add an item to the pool.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Pool`2.Get(`0)">
            <summary>
            Get an item from the pool.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Design.PositionOriginConverter">
            <summary>
            Converts a string to an instance of appropriate PositionOrigin
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.PositionOriginConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can convert from source type to PositionOrigin
            </summary>
            <param name="context">Type descriptor context</param>
            <param name="sourceType">source Type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.PositionOriginConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from obect to PositionOrigin
            </summary>
            <param name="context">Type descriptor context</param>
            <param name="culture">culture </param>
            <param name="value">object</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapPolyline">
            <summary>
            A polyline that can arrange itself on the map
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapShapeBase">
            <summary>
            Encapsulates a Shape class, and serves as a base class for shapes based on collection of points, 
            such as Polygon and Polyline
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapShapeBase.shape">
            <summary>
            The underlyeing shape object, the one that actualy gets put into DOM so it's rendered
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapShapeBase.topLeftViewportPoint">
            <summary>
            The viewport top/left point matching the shape-s topleft
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapShapeBase.#ctor(System.Windows.Shapes.Shape)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MapShapeBase"/> class.
            </summary>
            <param name="shape">The shape.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapShapeBase.Locations_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Get notified when Locations are changed
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapShapeBase.Locations_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Get notified when items were added or removed from location collection
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapShapeBase.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapShapeBase.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override the arrange pass
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.Fill">
            <summary>
            Gets or sets the fill property of the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.Stroke">
            <summary>
            Stroke property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.StrokeDashArray">
            <summary>
            StrokeDashArray property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.StrokeDashCap">
            <summary>
            StrokeDashCap property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.StrokeDashOffset">
            <summary>
            StrokeDashOffset property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.StrokeEndLineCap">
            <summary>
            StrokeEndLineCap property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.StrokeLineJoin">
            <summary>
            StrokeLineJoin property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.StrokeMiterLimit">
            <summary>
            StrokeMiterLimit property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.StrokeStartLineCap">
            <summary>
            StrokeStartLineCap property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.StrokeThickness">
            <summary>
            StrokeThickness property from the shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.Opacity">
            <summary>
            Make Opacity visible for scripting.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.OpacityMask">
            <summary>
            Make OpacityMask visible for scripting.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.Locations">
            <summary>
            Collection of Locations that define this shape.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.ProjectedPoints">
            <summary>
            Use this property to arrange points of the specific shape classes that derrive from this
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapShapeBase.EncapsulatedShape">
            <summary>
            Allow derived classes to access the shape object
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapPolyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MapPolyline"/> class.
            Let the base class know that we are working with a Polyline shape
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapPolyline.ProjectedPoints">
            <summary>
            Proxy this points to Polyline.Points
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapPolyline.FillRule">
            <summary>
            Gets or sets this polyline's fill rule.
            </summary>
            <value>
            The fill rule.
            </value>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.IAttachable">
            <summary>
            Represents an element that can be attached or detached. 
            It is used as part of map control when an item is attached and detached from the visual tree.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.IAttachable.Attach">
            <summary>
            Item is Attached to visual tree. 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.IAttachable.Detach">
            <summary>
            Item is Detached from visual tree
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Design.ShadowBrushConverter">
            <summary>
            Set the colors for ShadowText based on the map mode background.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.ShadowBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.ShadowBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.AerialMode">
            <summary>
            Map mode that displays aerial imagery, with or without labels.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AerialMode.labels">
            <summary>
            Whether or not to show labels.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.AerialMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.AerialMode"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.AerialMode.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AerialMode class.
            </summary>
            <param name="labels">Whether labels are shown or hidden</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.AerialMode.AsynchronousConfigurationLoaded(Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection,System.Object)">
            <summary>
            Callback when configuration loads
            </summary>
            <param name="config"></param>
            <param name="userState"></param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.AerialMode.Labels">
            <summary>
            Gets a value indicating whether labels are shown or hidden
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.AerialMode.TileUriFormat">
            <summary>
            Gets the tile URI format.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.AerialMode.Subdomains">
            <summary>
            Gets the subdomains.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.AerialMode.MapStyle">
            <summary>
            Gets PlatformServices map style.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.Point3D">
            <summary>
            Represents an x-, y-, z-coordinate set in three-dimensional space. 
            Can also represent a vector for certain vector operations.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a <see cref="T:Microsoft.Maps.MapExtras.Point3D"/> structure that contains the specified values.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point3D.Empty">
            <summary>
            Retrieves an empty 3-D point.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.#ctor(System.Windows.Point,System.Double)">
            <summary>
            Initializes a <see cref="T:Microsoft.Maps.MapExtras.Point3D"/> structure that contains the specified values.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point3D.X">
            <summary>
            Gets or sets the X-coordinate.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point3D.Y">
            <summary>
            Gets or sets the Y-coordinate.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point3D.Z">
            <summary>
            Gets or sets the Z-coordinate.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.ToPoint">
            <summary>
            Converts to a  two-dimensional point (disgards the Z coordinate).
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.op_Equality(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.op_Division(Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="val">The value.</param>
            <param name="div">The divisor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.op_Inequality(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.Equals(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.Add(Microsoft.Maps.MapExtras.Point3D@,Microsoft.Maps.MapExtras.Point3D@)">
            <summary>
            Adds two points.
            </summary>
            <param name="a">Point a.</param>
            <param name="b">Point b.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.Add(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Adds the specified value to the point.
            </summary>
            <param name="val">The val.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.Subtract(Microsoft.Maps.MapExtras.Point3D@,Microsoft.Maps.MapExtras.Point3D@)">
            <summary>
            Subtracts the b from a.
            </summary>
            <param name="a">Point a.</param>
            <param name="b">Point b.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.Equals(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.GetHashCode">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point3D.ToString">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TileSource">
            <summary>
            A source of tile renderables.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileSource.SetRelevantTiles(System.Collections.Generic.IList{System.Tuple{Microsoft.Maps.MapExtras.TileId,System.Nullable{System.Int32}}})">
            <summary>
            Provides a list of all tiles that are currently relevant to rendering the scene. Any tiles that were previously 
            returned from GetTile and are no longer in this list are elibible to be destroyed/re-used/etc. 
            </summary>
            <param name="relevantTiles">The list of relevant tiles. The int specifies the priority of the tile, where 
            higher values should be downloaded before lower values. A value of null indicates that the tile should not
            be downloaded, but it should be considered relevant.
            </param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileSource.GetTile(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileRenderable@,System.Boolean@)">
            <summary>
            Gets a tile that was reported as relevant using SetRelevantTiles. The tile may or may not be present yet.
            </summary>
            <param name="tileId"></param>
            <param name="tileRenderable">If null and tileWillNeverBeAvailable is false, then the tile simply isn't available yet.</param>
            <param name="tileWillNeverBeAvailable">
            If true, then the tile will never be available, either because it was never expected to be present, it was not found on the server, etc.
            </param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.FinestLodWidth">
            <summary>
            The width in pixels of the finest level of detail.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.FinestLodHeight">
            <summary>
            The height in pixels of the finest level of detail.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.TileWidth">
            <summary>
            The tile width in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.TileHeight">
            <summary>
            The tile height in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.MinimumLevelOfDetail">
            <summary>
            Specifies the minimum level of detail, i.e. the coarsest resolution, that the TileSource provides. 
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.MaximumLevelOfDetail">
            <summary>
            Specifies the maximum level of detail, i.e. the finest resolution, that the TileSource provides. 
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.TileFadeInDuration">
            <summary>
            The amount of time it takes for new tiles to fade in. If null, then the duration is zero.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.Clip">
            <summary>
            An optional clip rectangle, specified in pixels at the finest level of detail.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileSource.Transform">
            <summary>
            A transform that should be applied to the tile source before rendering it.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapExtras.TileSource.NewTilesAvailable">
            <summary>
            Fired whenever a new tile becomes available.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileRecord.NoLongerRendering">
            <summary>
            Called when the tile is still relevant to the view, but is no longer rendering because it is 
            being obscured by a finer resolution tile.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapExtras.TileRecord.NeedsRender">
            <summary>
            Fired when the tile record needs to be rendered, such as when a tile has become fully opaque.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRecord.LodToFinestLodScaleFactor">
            <summary>
            Provides the scale factor between the LOD of this tile and the finest LOD. This scale is not simply 
            2^(finestLod - tileId.LevelOfDetail) because of the way we've chosen to implement the alignement of 
            LOD samples for images whose dimensions are not divisible by a power of 2.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.MercatorCube">
            <summary>
            Defines a XYZ coordinate reference system based on Mercator projection. 
            X ranges from 0.0 to 1.0 and linearly presents Longitude ranging from -180.0 to +180.0.
            Y ranges from 0.0 to 1.0 and representes Latitude from +90.0 to -90.0, as defined by Mercator projeciton.
            Z represents Altitudes and scales similar to Y.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.LocationConverter">
            <summary>
            Defines an XYZ based coordinate reference system (CRS). Such CRS is required to convert
            XYZ-s to LatLongAlt-s and back.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.LocationConverter.EarthRadiusInMeters">
            <summary>
            Approximate radius of the earth in meters
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.LocationConverter.EarthCircumferenceInMeters">
            <summary>
            Aoorixmate circumference of the earth in meters
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.ToLocation(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Converts given 3D vector to LatLongAlt.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.ToLocation(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Conveverts given 3D vector to Location, wrapping world waround given center.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.FromLocation(Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Converts given LatLongAlt to 3D Vector.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.FromLocation(Microsoft.Maps.MapControl.WPF.Location,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Conveverts Location to 3D vector, wrapping world waround given center.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.GetUpVector(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Returns the vector pointing UP at given point.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.GetNorthVector(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Gets the vector that points to North.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.ChangeAltitude(Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Finds matching point on the given altitude plane for given point.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.VectorDistanceToMeters(Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Gets the scale in meters at given point
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LocationConverter.MetersToVectorDistance(Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Gets the scale in meters at given point
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.LocationConverter.Direction">
            <summary>
            Gets weather this CRS uses Left or Rigth handed coordinate system.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MercatorCube.MercatorLatitudeLimit">
            <summary>
            Maximum allowed Latitude in Mercator space.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MercatorCube.OneMeterAsVectorDistanceAtEquator">
            <summary>
            Distance between two vectors in this coordinate space at equator (latitude = 0) if thir distance in global space is 1 meter.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.ToLocation(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Converts given 3D Vector in MercatorCube coordinate reference system to a LatLongAlt.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.ToLocation(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Conveverts given 3D vector to Location, wrapping world waround given center.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.FromLocation(Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Converts given LatLongAlt to 3D Vector in MercatorCube coordinate reference system.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.FromLocation(Microsoft.Maps.MapControl.WPF.Location,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Conveverts Location to 3D vector, wrapping world waround given center.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.GetUpVector(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Returns vector pointing UP for given point.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.GetNorthVector(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Returns vector ponting to North.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.ChangeAltitude(Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Finds matching point on the given altitude plane for given point.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.VectorDistanceToMeters(Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Gets the scale in meters at given point
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.MetersToVectorDistance(Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Gets the scale in meters at given point
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.VectorDistanceToMetersAtLatitude(System.Double,System.Double)">
            <summary>
            Converts distance between two vectors to meters.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.MetersToVectorDistanceAtLatitude(System.Double,System.Double)">
            <summary>
            Converts meters to distance between two vectors.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.YToLatitude(System.Double)">
            <summary>
            Converts Point3D.Y to Latitude
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.LatitudeToY(System.Double)">
            <summary>
            Converts Latitude to Point3D.Y 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MercatorCube.WrapX(System.Double,System.Double)">
            <summary>
            Normalize the X coordinate as for world wrap.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.MercatorCube.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.MercatorCube.Direction">
            <summary>
            MercatorCube uses Left handed coordinate system.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.LocationCollection">
            <summary>
            LocationCollection is a list of Locations
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationCollection.Add(Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Method that can be used via javascript
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.AttributionInfo">
            <summary>
            Details about Attribution
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.AttributionInfo.#ctor">
            <summary>
            Create an instance of AttributionInfo
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.AttributionInfo.#ctor(System.String)">
            <summary>
            Create an instance of AttributionInfo
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.AttributionInfo.op_Equality(Microsoft.Maps.MapControl.WPF.Core.AttributionInfo,Microsoft.Maps.MapControl.WPF.Core.AttributionInfo)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.AttributionInfo.op_Inequality(Microsoft.Maps.MapControl.WPF.Core.AttributionInfo,Microsoft.Maps.MapControl.WPF.Core.AttributionInfo)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.AttributionInfo.Equals(System.Object)">
            <summary>
            Equals override.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.AttributionInfo.GetHashCode">
            <summary>
            GetHashCode override.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.AttributionInfo.Text">
            <summary>
            Text to display on the Attribution
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground">
            <summary>
            Control that displays things such as Scale/Logo/Copyright/Navigation on top of the map.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.CopyrightTimeout">
            <summary>
            Timeout for Copyright update in milliseconds
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._Map">
            <summary>
            The map with which this <see cref="T:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground"/> is associated.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._Logos">
            <summary>
            The logo controls (there can be multiple logo controls in a single theme).
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._Copyrights">
            <summary>
            The copyright controls (there can be multiple copyright controls in a single theme).
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._Scales">
            <summary>
            The scale controls (there can be multiple scale controls in a single theme).
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._Compasses">
            <summary>
            The compass controls (there can be multiple compass controls in a single theme).
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._TemplateApplied">
            <summary>
            True if the template has been applied.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._UpdateTimer">
            <summary>
            When the copyright attributions and scale are made dirty by switching map mode or changing the view this timer
            fires every 500ms to request the new copyright data.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.MercatorModeLogicalAreaSizeInScreenSpaceAtLevel1">
            <summary>
            The size of the mercator mode projection in pixels at zoom level 1.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._copyrightUpdateTimer">
            <summary>
            Timer for copyright updates. Fires a Tick event after ViewChangeEnd to update the copyright after a set period of time
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.#ctor(Microsoft.Maps.MapControl.WPF.Map)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground"/> class.
            </summary>
            <param name="map">The map with which this <see cref="T:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground"/> is associated.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.AttachProperty">
            <summary>
            to attach the scalebar property in xaml or code behind
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._Map_ModeChanged(System.Object,Microsoft.Maps.MapControl.WPF.MapEventArgs)">
            <summary>
            Handles the ModeChanged event of the _Map control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Microsoft.Maps.MapControl.WPF.MapEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.RefreshMapMode">
            <summary>
            Refreshes the map mode.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._UpdateTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles the Tick event of the _CopyrightRequestTimer control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.CopyrightUpdateTimerTick(System.Object,System.EventArgs)">
            <summary>
            Copyright Update Timer Tick
            </summary>
            <param name="sender">sender</param>
            <param name="e">event</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.InvokeCopyrightRequest">
            <summary>
            Invokes the copyright request.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.CopyrightCallback(Microsoft.Maps.MapControl.WPF.Core.CopyrightResult)">
            <summary>
            Callback made once the copyright string is available.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._Map_ViewChangeStart(System.Object,Microsoft.Maps.MapControl.WPF.MapEventArgs)">
            <summary>
            Handles the ViewChangeStart event of the _Map control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Microsoft.Maps.MapControl.WPF.MapEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground._Map_ViewChangeEnd(System.Object,Microsoft.Maps.MapControl.WPF.MapEventArgs)">
            <summary>
            Handles the ViewChangeEnd event of the _Map control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Microsoft.Maps.MapControl.WPF.MapEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.UpdateScale">
            <summary>
            Updates the scale to match the current map view.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.MapForeground.GetDescendents(System.Windows.DependencyObject)">
            <summary>
            Uses VisualTreeHelper to enumerate all descendents of the given root.
            </summary>
            <param name="root">The dependency object root.</param>
            <returns>An enumeration of all of the descendents.</returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapTileLayer">
            <summary>
            A map layer that displays image tiles.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapTileLayer.Log2DuplicatePyramidCount">
            <summary>
            The log base 2 of the number of duplicate pyramids, replicated horizontally, are used to achieve world wrap
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapTileLayer.tileWidth">
            <summary>
            Tile width in pixels
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapTileLayer.tileHeight">
            <summary>
            Tile height in pixels
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapTileLayer.tileSource">
            <summary>
            tile source
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapTileLayer.rasterTileSource">
            <summary>
            Raster tile source
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapTileLayer.tileWrap">
            <summary>
            Tile wrap
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapTileLayer._TilePyramidRenderable">
            <summary>
            The tile pyramid renderable
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapTileLayer.showBackgroundTiles">
            <summary>
            Show background tiles
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer.#ctor">
            <summary>
            Creates an instance of MapTileLayer
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer.Microsoft#Maps#MapControl#WPF#IAttachable#Attach">
            <summary>
            Attach 
            This gets called when the MapTileLayer is added to the Children container on the Map
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer.Microsoft#Maps#MapControl#WPF#IAttachable#Detach">
            <summary>
            Detaches this instance.
            This gets called when the MapTileLayer is removed from the Children container on the Map
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer.Microsoft#Maps#MapControl#WPF#IProjectable#SetView(System.Windows.Size,System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Sets the projectsion from normalized mercator to viewport space.
            </summary>
            <param name="viewportSize">The size of the viewport being projected to, in pixels.</param>
            <param name="normalizedMercatorToViewport">Transfrom from normalized mercator to viewport.</param>
            <param name="viewportToNormalizedMercator">Transform from viewport to normalized mercator.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override the arrange pass.
            </summary>
            <param name="arrangeSize">The arrange bounds.</param>
            <returns>The resulting size.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer.InternalRender">
            <summary>
            The internal render method.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer.EnsureTileSource">
            <summary>
            Ensures that the tile source is initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer._TilePyramidRenderable_NeedsRender(System.Object,System.EventArgs)">
            <summary>
            Handles the NeedsRender event of _TilePyramidRenderable.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapTileLayer.MapTileLayer_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles when the map tile layer loads
            </summary>
            <param name="sender">source of the event</param>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapTileLayer.TileWidth">
            <summary>
            Tile Width in Pixels
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapTileLayer.TileHeight">
            <summary>
            Tile Height in Pixels
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapTileLayer.ShowBackgroundTiles">
            <summary>
            Specifies whether to show background tiles when rendering the tile layer.
            Default value is true. When set to true, the tile layer will go up the tile pyramid and show background tiles 
            to keep the tile layer from appearing blank during map animations and transitions.
            When set to false, only the tiles at the current level of detail will be rendered.
            If you have transparent overlays, it is recommended to set this to false to prevent blurring.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapTileLayer.TileSource">
            <summary>
            Tile Source
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.Point4D">
            <summary>
            Encapsulates a 4 dimensional point based on doubles. Contains a subset of the functionality 
            of the original Vector4D, which may be found in Metropolis\Platform\Store\Geometry\VectorMath.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point4D.X">
            <summary>
            X component of point
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point4D.Y">
            <summary>
            Y component of point
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point4D.Z">
            <summary>
            Z component of point
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.Point4D.W">
            <summary>
            W component of point
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.op_Equality(Microsoft.Maps.MapExtras.Point4D,Microsoft.Maps.MapExtras.Point4D)">
            <summary>
            Equality operator
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.Equals(System.Object)">
            <summary>
            Override Equals method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.GetHashCode">
            <summary>
            Ovverride GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.op_Inequality(Microsoft.Maps.MapExtras.Point4D,Microsoft.Maps.MapExtras.Point4D)">
            <summary>
            Not equal operator
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.op_Addition(Microsoft.Maps.MapExtras.Point4D,Microsoft.Maps.MapExtras.Point4D)">
            <summary>
            Addition operator
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.op_Subtraction(Microsoft.Maps.MapExtras.Point4D,Microsoft.Maps.MapExtras.Point4D)">
            <summary>
            Subtraction operator
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.op_Multiply(System.Double,Microsoft.Maps.MapExtras.Point4D)">
            <summary>
            Scaling operator
            </summary>
            <param name="scalar"></param>
            <param name="point"></param>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Point4D.Lerp(Microsoft.Maps.MapExtras.Point4D,Microsoft.Maps.MapExtras.Point4D,System.Double)">
            <summary>
            Linearly interpolate by alpha between pointss point0 and point1
            </summary>
            <param name="point0"></param>
            <param name="point1"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TileRenderable">
            <summary>
            A TileRenderable is returned by the TileSource to the TileRenderable. The TileRenderable maintains the collection of TileRenderables
            that are relevant to the view and calls them to render when appropriate.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TileRenderable.elementCanvas">
            <summary>
            Only used in SW case, where we have to do a post-projection clip
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileRenderable.#ctor(Microsoft.Maps.MapExtras.TileId,System.Windows.FrameworkElement,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.TileRenderable"/> class.
            </summary>
            <param name="tileId">The tile id.</param>
            <param name="element">The element that represents the visual component of the tile.</param>
            <param name="fadeInDuration">The amount of time it takes for the tile to fade in. If null, then the duration is zero.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileRenderable.DetachFromElement">
            <summary>
            Severs all ties with the element including animations that would othewise continue to affect
            it. The TileRenderable cannot be used after the element is detached.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileRenderable.NoLongerRendering">
            <summary>
            Called when the tile is still relevant to the view, but is no longer rendering because it is 
            being obscured by a finer resolution tile.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileRenderable.Render(Microsoft.Maps.MapExtras.Point2D,System.Windows.Media.Media3D.Matrix3D@,System.Double)">
            <summary>
            Renders the tile to the Canvas. May be overridden by derived classes to add additional rendering
            functionality beyond simply adjusting the TileRenderables's transforms.
            </summary>
            <param name="viewportSize">The size of the viewport.</param>
            <param name="tileToViewport">The transform from the tile space to the viewport (the Canvas.)</param>
            <param name="preciseRenderLod">The level of detail at which the tile is being rendered. For example, 17.5 is halfway between LOD 17 and 18.</param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.TileId">
            <summary>
            The id of the tile being rendered.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.AllowHardwareAcceleration">
            <summary>
            True if HW acceleration may be used. HW acceleration is only used if it's actually available. Default value is false.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.IsVisible">
            <summary>
            True if the tile is currently in the visual tree.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.LayerCanvas">
            <summary>
            Sets the Canvas to which this TileRenderable will render. TileRenderables
            are made visible/invisible by adding/removing from the Canvas.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.TargetOpacity">
            <summary>
            The target opacity
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.Opacity">
            <summary>
            The opacity of the tile
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapExtras.TileRenderable.BecameFullyOpaque">
            <summary>
            Called whenever the tile's opacity reaches 1.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.ZIndex">
            <summary>
            Sets the Z-index of the tile with respect to other tiles in the Canvas.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.Clip">
            <summary>
            The clip rectangle that's applied to the element. This both determines how much this tile will overlap with
            its neighboring tiles as well as whether or not it is subject to a rectangular clip that's applied to the
            tile pyramid.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileRenderable.Element">
            <summary>
            The visual component of the tile.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TilePyramidRenderable.MaxOversampleLevels">
            <summary>
            Maximum levels we allow tiles to be oversampled for. 256*2^5 gets close to int.MaxValue, which causes rendering issues in Silverlight.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TilePyramidRenderable._effectiveRenderLod">
            <summary>
            The level of detail of the tile pyramid that is being displayed. This is distinguished from the render LOD because it takes
            into account LOD availability.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TilePyramidRenderable.lodAvailabilities">
            <summary>
            Specifies whether a level of detail is available. A null value indicates that we do not yet know if it's available.        
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TilePyramidRenderable.ChooseLevelOfDetailSettingsDownloadNormal">
            <summary>
            render everything that's available
            render LOD = Normal
            render LOD-2 = High
            render LOD-5 to LOD-1 = Low
            everything else >= effective render LOD = Idle
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TilePyramidRenderable.ChooseLevelOfDetailSettingsDownloadInMotion">
            <summary>
            render LOD - MaxOverSampleLevels = High
            render LOD - 3 = Normal
            render LOD = Low
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TilePyramidRenderable.ChooseLevelOfDetailSettingsDownloadNothing">
            <summary>
            Continues to show all downloaded tiles, but doesn't download any new ones.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidRenderable.UpdateLodAvailabilitiesAndEffectiveRenderLod(System.Int32)">
            <summary>
            Updates LOD availabilities and the effective render LOD based on the evidence provided by the current set of tiles
            in the tile pyramid. If we try to download tiles from an LOD and they all come back as "will never be available" then
            that LOD is marked as not available. However, if we pan or zoom such that these tiles get tossed out by the tile pyramid
            then we lose that record and we have to try to downoad some more tiles to determine the LOD availability again. This mechanism 
            is intentional and allows the rendering to adapt to tile sources that have varying coverage.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidRenderable.ShowBackgroundTiles">
            <summary>
            Specifies whether to show background tiles when rendering the tile layer
            This will go up the tile pyramid and show a background tile at a lower LOD to keep the screen from looking blank
            Default value is true. When set to false, only the tiles at the current LOD will be rendered
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidRenderable.ChooseLevelOfDetailSettings">
            <summary>
            Specifies the algorithm for determining tile download priority and display.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapExtras.TilePyramidRenderable.NeedsRender">
            <summary>
            Fired when the tile pyramid needs to be rendered, such as when new tiles have become available.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidRenderable.IsIdle">
            <summary>
            Checks whether ImageryLayer is done downloading and blending.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidRenderable.HasSomeTiles">
            <summary>
            Checks whether this ImageryLayer has some tiles to provide meaningfull screen coverage.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.AttributionCollection">
            <summary>
            A ReadOnlyCollection and ObservableCollection containg a collection of AttributionInfo
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.AttributionCollection.#ctor(System.Collections.ObjectModel.ObservableCollection{Microsoft.Maps.MapControl.WPF.Core.AttributionInfo})">
            <summary>
            Create an instance of AttributionCollection
            </summary>
            <param name="list">The collection to wrap.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.AttributionCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the System.Collections.ObjectModel.ReadOnlyObservableCollection.CollectionChanged event.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Core.AttributionCollection.CollectionChanged">
            <summary>
            Occurs when an item is added or removed.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.BitmapImageRequest.NetworkPrioritySnapshot">
            <summary>
            The network priority field may be changed at any time by the consuming thread. This is a snapshot
            of that field that is not subject to being changed during, say, a sort of requests by priority.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Design.LocationRectConverter">
            <summary>
            Parses a string into a instance of LocationRect
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.LocationRectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Let caller know that we can convert from string
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.LocationRectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert string to LocationRect
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Design.LocationConverter">
            <summary>
            Converts types into a Location
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.LocationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Let caller know what types it can convert from
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.LocationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert object to Location
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.LoadingErrorEventArgs">
            <summary>
            Event argument when the map fails to load.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapEventArgs">
            <summary>
            Event arguments for the events triggered by the map
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MapEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Maps.MapControl.WPF.MapEventArgs"/> is handled.
            </summary>
            <value>
              <c>true</c> if handled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LoadingErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Creates an instance of LoadingErrorEventArgs.
            </summary>
            <param name="loadingException">Exception thrown when map was loading.</param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LoadingErrorEventArgs.LoadingException">
            <summary>
            Gets the exception thrown when map was loading.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.CopyrightKey">
            <summary>
            Key used to hash copyright requests.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText">
            <summary>
            This control displays text that will show up on top of background better than a single color. The text is
            displayed by offsetting text in one color on top of a another color.
            </summary>
            <summary>
            ShadowText
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.#ctor">
            <summary>
            Constructor for control.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.TextProperty">
            <summary>
            Dependency property that contains the text displayed in the control.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.ForegroundTopProperty">
            <summary>
            Dependency property that specifies the "top" color to use for the text.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.ForegroundBottomProperty">
            <summary>
            Dependency property that specifies the "bottom" color to use for the text.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.OnTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Static callback when a property of the control is changed.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.OnTextChanged">
            <summary>
            Callback on the object ... insures that the control is displayed properly with the new properties.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.Text">
            <summary>
            Text to display.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.ForegroundTop">
            <summary>
            The "top" color used for the text.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.ShadowText.ForegroundBottom">
            <summary>
            The behind color for the text.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.Compass">
            <summary>
            A compass for the map overlay.
            </summary>
            <summary>
            Compass
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Compass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Overlays.Compass"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Compass.HeadingProperty">
            <summary>
            The identifier for the Heading dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Compass.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.Compass.Heading">
            <summary>
            Gets or sets the heading.
            </summary>
            <value>The heading.</value>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.RectangularSolid">
            <summary>
            Represents a three dimensional box. Contains a subset of the functionality of the original Rectangle3D,
            which may be found in Metropolis\Platform\Store\Geometry\VectorMath.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RectangularSolid.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="sizeX"></param>
            <param name="sizeY"></param>
            <param name="sizeZ"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RectangularSolid.op_Equality(Microsoft.Maps.MapExtras.RectangularSolid,Microsoft.Maps.MapExtras.RectangularSolid)">
            <summary>
            Equality operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RectangularSolid.op_Inequality(Microsoft.Maps.MapExtras.RectangularSolid,Microsoft.Maps.MapExtras.RectangularSolid)">
            <summary>
            Not equal operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RectangularSolid.Equals(System.Object)">
            <summary>
            Override Equals method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RectangularSolid.GetHashCode">
            <summary>
            Ovverride GetHashCode method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RectangularSolid.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RectangularSolid.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RectangularSolid.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RectangularSolid.SizeX">
            <summary>
            Size in X dimension.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RectangularSolid.SizeY">
            <summary>
            Size in Y dimension.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RectangularSolid.SizeZ">
            <summary>
            Size in Z dimension.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.NetworkPriority">
            <summary>
            Priority of a network request relative to other network requests.
            Higher numbers means more important.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.NetworkPriority.High">
            <summary>
            High priority request.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.NetworkPriority.Normal">
            <summary>
            Normal priority request.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.NetworkPriority.Low">
            <summary>
            Low priority request.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.NetworkPriority.Idle">
            <summary>
            Will not be started until the network has been idle for a quarter of a second.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.BitmapImageRequestQueue.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.BitmapImageRequestQueue.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.AltitudeReference">
            <summary>
            Reference for Altitude
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AltitudeReference.Ground">
            <summary>
            meters above ground level.(Default)
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AltitudeReference.Ellipsoid">
            <summary>
            meters above the WGS 84 ellipsoid
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AltitudeReference.SeaLevel">
            <summary>
            meters above sea level
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AltitudeReference.Surface">
            <summary>
            meters above ground structures
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Location">
            <summary>
            Latitude / Longitude
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Location.MaxLatitude">
            <summary>
            Maximum latitude (degrees)
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Location.MinLatitude">
            <summary>
            Minimum latitude (degrees)
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Location.MaxLongitude">
            <summary>
            Maximum longitude (degrees)
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Location.MinLongitude">
            <summary>
            Minimum longitude (degrees)
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Location"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Location"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Location"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="altitude">The altitude.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.#ctor(System.Double,System.Double,System.Double,Microsoft.Maps.MapControl.WPF.AltitudeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Location"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="altitude">The altitude.</param>
            <param name="altitudeReference">The altitude reference.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.#ctor(Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Location"/> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.NormalizeLongitude(System.Double)">
            <summary>
            Changes a longitude to an equivalent longitude that is within (+/-) 180 degrees.
            </summary>
            <param name="longitude">Longitude to parse.</param>
            <returns>An equivalent longitude to the one passed in.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.op_Equality(Microsoft.Maps.MapControl.WPF.Location,Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="location1">The left location.</param>
            <param name="location2">The right location.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.op_Inequality(Microsoft.Maps.MapControl.WPF.Location,Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="location1">The left location.</param>
            <param name="location2">The right location.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance, using the given format provider.
            </summary>
            <param name="provider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="provider">The provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Location.IsEqual(System.Double,System.Double)">
            <summary>
            Returns true if the two given doubles are equal.
            </summary>
            <param name="value1">first value</param>
            <param name="value2">second value</param>
            <returns>True if the two given doubles are equal.</returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Location.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Location.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Location.Altitude">
            <summary>
            Gets or sets the altitude, in meters.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Location.AltitudeReference">
            <summary>
            Gets or sets the altitude reference.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapCore">
            <summary>
            The core map control. This control does not handle mouse or touch events and has no foreground
            controls, such as copyright and scale.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._MapContainer">
            <summary>
            The top-level container for the map.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._MapForegroundContainer">
            <summary>
            Container that holds the map foreground.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._MapModeContainer">
            <summary>
            Container that holds the map mode.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._MapUserLayerContainer">
            <summary>
            Container that holds the user layer(s);
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._MapModes">
            <summary>
            All existing map modes, including ones that have been previously set but not discarded
            yet because they're needed for the mode transition animation.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._CurrentMapMode">
            <summary>
            The current map mode. It might not be visible yet if it's waiting to be faded in.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._CurrentMapModeTransitionTimeout">
            <summary>
            Timer that fires to check if the map mode should transition despite the current mode having
            enough tiles downloaded to invoke the transition.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._PendingMapMode">
            <summary>
            A map mode that was set during a map mode transition animation. It has to be wait
            until the animation is finished before being set.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ZoomAndPanAnimationDriver">
            <summary>
            Animation driver for the "zoom and pan" animation.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ZoomAndPanAnimator">
            <summary>
            Animator for the "zoom and pan" animation.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ZoomAndPan_FromRect">
            <summary>
            The starting rect for the "zoom and pan" animation.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ZoomAndPan_FromZoomLevel">
            <summary>
            The starting zoom level for the "zoom and pan" animation.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ViewUpdatingInternally">
            <summary>
            True if the view is being updated internally. This is used to signal to the dependency
            properties that describe the view that they are being changed to reflect internal updates
            and they shouldn't try to set a new view (this would cause an infinite loop).
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._HeadingSpring">
            <summary>
            Spring that governs the heading, specified in degrees.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ZoomAndRotateOrigin">
            <summary>
            The origin about which zoom and rotation takes place. This position remains fixed on the
            screen as the zoom and/or rotate occurs.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ZoomLevelSpring">
            <summary>
            Spring that governs the zoom level, specified using the Bing Maps zoom level sheme.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._CenterNormalizedMercatorSpringX">
            <summary>
            The spring that governs the X-component of the position in normalized mercator that's at the center of the viewport.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._CenterNormalizedMercatorSpringY">
            <summary>
            The spring that governs the Y-component of the position in normalized mercator that's at the center of the viewport.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ViewIsAnimating">
            <summary>
            True if view is currently animating.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._Disposed">
            <summary>
            True if the control has been disposed.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._ModeSwitchAnationDriver">
            <summary>
            Drives the fading out of the old map mode when a new one replaces it.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._NormalizedMercatorToViewport_TranslatePre">
            <summary>
            1.) Translate target normalized mercator center to origin
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._NormalizedMercatorToViewport_Scale">
            <summary>
            2.) Scale the map to match zoom level
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._NormalizedMercatorToViewport_Rotate">
            <summary>
            3.) Rotate the map by heading
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._NormalizedMercatorToViewport_TranslatePost">
            <summary>
            Translate to center of the viewport
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore._UserInputTimeout">
            <summary>
            Timer to delay throwing viewchangeend during panning.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MapCore"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            Additionally, halts any pending downloads of map imagery and allows existing map imagery resources to be freed.
            This call requires that the control is no longer in the visual tree, i.e. its Parent is null. Once disposed, 
            the control may not be added to the visual tree again.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore.ZoomLevelProperty">
            <summary>
            Dependency property for ZoomLevel.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnZoomLevelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ZoomLevel dependency property is changed.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnZoomLevelChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ZoomLevel dependency property is changed.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore.ScaleVisibilityProperty">
            <summary>
            xaml dependency property for scale bar visiblity.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnScaleVisibilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the scalebar dependency property is changed.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnScaleVisibilityChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            callback method on object scalebar visibility is changed. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore.HeadingProperty">
            <summary>
            Dependency property for Heading.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnHeadingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Heading dependency property is changed.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnHeadingChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the Heading dependency property is changed.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore.CenterProperty">
            <summary>
            Dependency property for Center.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnCenterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Center dependency property is changed.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnCenterChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the Center dependency property is changed.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore.CredentialsProviderProperty">
            <summary>
            Xaml dependency property for CredentialsProvider
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnCredentialsProviderChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method on object when credentials is changed. 
            </summary>
            <param name="d">dependency object</param>
            <param name="eventArgs">event args</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnCredentialsProviderChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method on object when Credentials is changed. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore.CultureProperty">
            <summary>
            Xaml dependency property for map culture.
            </summary>
            The property is a string to enable cultures known by our platform services that aren't necessarily installed
            on a user's machine.
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapCore.ModeProperty">
            <summary>
            The identifier for the Mode dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.UpdateMapMode">
            <summary>
            Updates the map mode.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.SetView(Microsoft.Maps.MapControl.WPF.Location,System.Double)">
            <summary>
            Set the map view. 
            </summary>
            <param name="center">The map location at the center of the view.</param>
            <param name="zoomLevel">zoom level of the map</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.SetView(Microsoft.Maps.MapControl.WPF.Location,System.Double,System.Double)">
            <summary>
            Sets the map view.
            </summary>
            <param name="center">The map location at the center of the view.</param>
            <param name="zoomLevel">zoom level of the map</param>
            <param name="heading">heading of the map</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.SetView(System.Double,System.Double)">
            <summary>
            Sets the map view.
            </summary>
            <param name="zoomLevel">The zoom level of the map.</param>
            <param name="heading">The heading of the map.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.SetView(Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Sets the map view base on the LocationRect. View will contain the whole LocationRect.
            </summary>
            <param name="boundingRectangle">Desired LocationRect of the new view.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.SetView(System.Collections.Generic.IEnumerable{Microsoft.Maps.MapControl.WPF.Location},System.Windows.Thickness,System.Double)">
            <summary>
            Sets the view so that it contains all of the given locations.
            </summary>
            <param name="locations">The locations.</param>
            <param name="margin">The margin, in viewport pixels, which must be non-negative.</param>
            <param name="heading">The heading.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.SetView(System.Collections.Generic.IEnumerable{Microsoft.Maps.MapControl.WPF.Location},System.Windows.Thickness,System.Double,System.Double)">
            <summary>
            Sets the view so that it contains all of the given locations.
            </summary>
            <param name="locations">The locations.</param>
            <param name="margin">The margin, in viewport pixels, which must be non-negative.</param>
            <param name="heading">The heading.</param>
            <param name="maxZoomLevel">The max zoom level.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.SetView(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Sets the map view.
            </summary>
            <param name="centerNormalizedMercator">The map point at the center of the view in normalized mercator.</param>
            <param name="zoomLevel">The zoom level.</param>
            <param name="heading">The heading.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.TryViewportPointToLocation(System.Windows.Point,Microsoft.Maps.MapControl.WPF.Location@)">
            <summary>
            Figures out what Location the specified viewport point maps to based on the current mode.
            </summary>
            <param name="viewportPoint">The viewport point.</param>
            <param name="location">The location.</param>
            <returns>True if the value succeeded.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.ViewportPointToLocation(System.Windows.Point)">
            <summary>
            Figures out what Location the specified viewport point maps to based on the current mode.
            </summary>
            <param name="viewportPoint">The viewport point.</param>
            <returns>The location.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.TryLocationToViewportPoint(Microsoft.Maps.MapControl.WPF.Location,System.Windows.Point@)">
            <summary>
            Figures out where in current viewport the given Location is based on the current mode.
            </summary>
            <param name="location">The location.</param>
            <param name="viewportPoint">The viewport point.</param>
            <returns>True if the conversion succeeded.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.LocationToViewportPoint(Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Figures out where in current viewport the given Location is based on the current mode.
            </summary>
            <param name="location">The location.</param>
            <returns>The viewport point.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            Invoked when the parent of this element in the visual tree is changed. Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)"/>.
            </summary>
            <param name="oldParent">The old parent element. May be null to indicate that the element did not have a visual parent previously.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.TransformNormalizedMercatorToViewport_Current(System.Windows.Point)">
            <summary>
            Transforms a normalized mercator point to a viewport point in the current view.
            </summary>
            <param name="normalizedMercatorPoint">The normalized mercator point.</param>
            <returns>The viewport point.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.TransformViewportToNormalizedMercator_Current(System.Windows.Point)">
            <summary>
            Transforms a viewport point to a normalized mercator point in the current view.
            </summary>
            <param name="viewportPoint">The viewport point.</param>
            <returns>The normalized mercator point.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.TransformViewportToNormalizedMercator_Target(System.Windows.Point)">
            <summary>
            Transforms a viewport point to a normalized mercator point in the target view.
            </summary>
            <param name="viewportPoint">The viewport point.</param>
            <returns>The normalized mercator point.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.AnimateViewUsingZoomAndPan(System.Double,System.Windows.Point)">
            <summary>
            Invokes the "zoom and pan" animation.
            </summary>
            <param name="zoomLevel">The target zoom level.</param>
            <param name="centerNormalizedMercator">The target normalized mercator center.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore._ZoomAndPanAnimationDriver_AnimationProgressChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the AnimationProgressChanged event of the _ZoomAndPanAnimationDriver.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore._ZoomAndPanAnimationDriver_AnimationStopped(System.Object,System.EventArgs)">
            <summary>
            Handles the AnimationStopped event of the _ZoomAndPanAnimationDriver control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore._ZoomAndPanAnimationDriver_AnimationCompleted(System.Object,System.EventArgs)">
            <summary>
            Handles the AnimationCompleted event of the _ZoomAndPanAnimationDriver.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.CalculateNormalizedMercatorToViewportMapping(System.Windows.Size,System.Windows.Point,System.Double,System.Double,System.Boolean,System.Windows.Media.Media3D.Matrix3D@,System.Windows.Media.Media3D.Matrix3D@)">
            <summary>
            Calculates the normalized mercator to viewport mapping.
            </summary>
            <param name="viewportSize">Size of the viewport.</param>
            <param name="centerNormalizedMercator">The center normalized mercator.</param>
            <param name="heading">The heading.</param>
            <param name="zoomLevel">The zoom level.</param>
            <param name="applyWorldWrap">if set to <c>true</c> [apply world wrap].</param>
            <param name="normalizedMercatorToViewport">The normalized mercator to viewport.</param>
            <param name="viewportToNormalizedMercator">The viewport to normalized mercator.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.ApplyWorldWrap(System.Windows.Point)">
            <summary>
            The map is a virtually infinite repetition of tile pyramids in its horizontal and vertical extents. We 
            wrap the X- and Y-coordinates (the result is always in the range [0,1]) so that rendering, lat/lon locations, 
            etc., which is of finite extent, doesn't run off the edge.
            </summary>
            <param name="normalizedMercator">The point to which the wrap is applied.</param>
            <returns>The wrapped point.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.ApplyWorldWrapInverse(System.Windows.Point,System.Windows.Point)">
            <summary>
            Wraps the given normalized mercator point such that it's in canonical normalized mercator map space, then moves
            that point into the map containing the target normalized mercator point point.
            </summary>
            <param name="normalizedMercator">The normalized mercator point.</param>
            <param name="normalizedMercatorTarget">The normalized mercator target point.</param>
            <returns>The normalized mercator point in the target map.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.UpdateView">
            <summary>
            Updates the view.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.UpdateViewDependencyProperties">
            <summary>
            Updates the value of the dependency properties related to the view to reflect the latest.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore._MapContainer_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the _MapContainer.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.ConvertNormalizedMercatorToLocation(System.Windows.Point)">
            <summary>
            Converts a normalized mercator point to a Location.
            </summary>
            <param name="normalizedMercatorPoint">The normalized mercator point.</param>
            <returns>The location.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.ConvertLocationToNormalizedMercator(Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Converts a location to a normalized mercator point.
            </summary>
            <param name="location">The location.</param>
            <returns>The normalized mercator point.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.MapCore_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the MapCore control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.SetViewInternal(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Sets the view.
            </summary>
            <param name="centerNormalizedMercator">The map point at the center of the view in normalized mercator.</param>
            <param name="zoomLevel">The zoom level.</param>
            <param name="heading">The heading.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.UserInputCompleted(System.Object,System.EventArgs)">
            <summary>
            Fires the viewchangeend event after a map pan.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.AnimateViewUsingSprings(System.Windows.Point,System.Double,System.Double,System.Boolean)">
            <summary>
            Animates the view using springs.
            </summary>
            <param name="centerNormalizedMercator">The normalized mercator center.</param>
            <param name="zoomLevel">The zoom level.</param>
            <param name="heading">The heading.</param>
            <param name="setViewImmediately">if set to <c>true</c> then set the view immediately.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.Transform(System.Windows.Media.Media3D.Matrix3D,System.Windows.Point)">
            <summary>
            Transforms the point by the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="point">The point.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.Transform(System.Windows.Media.Media3D.Matrix3D,Microsoft.Maps.MapExtras.Point2D)">
            <summary>
            Transforms the point by the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="point">The point.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.AdjustCenterAfterTransform(System.Windows.Point)">
            <summary>
            Adjusts the center to compensate for the translation/rotation of the transform.
            </summary>
            <param name="zoomAndRotateOriginNormalizedMercatorPreUpdate">The zoom and rotate origin in normalized mercator prior to the transform.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.CompositionTarget_Rendering(System.Object,System.EventArgs)">
            <summary>
            Handles the Rendering event of the CompositionTarget.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore.ArrestZoomAndRotation">
            <summary>
            Arrests any remaining zooming and panning. Sets the zoom and rotate
            origin to null.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore._CurrentMapModeTransitionTimeout_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handles the Elapsed event of the _CurrentMapModeTransitionTimeout.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore._CurrentMapMode_Rendered(System.Object,System.EventArgs)">
            <summary>
            Handles the Rendered event of the _CurrentMapMode.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore._ModeSwitchAnationDriver_AnimationCompleted(System.Object,System.EventArgs)">
            <summary>
            Handles the AnimationCompleted event of the _ModeSwitchAnationDriver. Removes the map mode
            that was just faded out entirely. If there is a pending map mode to be set, kicks that setting
            off.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapCore._ModeSwitchAnationDriver_AnimationProgressChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the AnimationCompleted event of the _ModeSwitchAnationDriver.
            Animates the opacity of the previously set map mode, fading it out.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.ZoomLevel">
            <summary>
            Gets or sets the zoom level. Setting this property immediately sets the view to the current
            target heading, map center, and the new zoom level.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.ScaleVisibility">
            <summary>
            xaml property to hide/show scale bar
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.Heading">
            <summary>
            Gets or sets the heading property, measured in degrees. Setting this property immediately sets the view
            to the current target zoom level, map center, and the new heading.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.Center">
            <summary>
            Gets or sets the map location that appears at the center of the viewport. Setting this property immediately sets the view
            to the current target zoom level, heading, and the new map center.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.CredentialsProvider">
            <summary>
            Gets or sets the credentials used to authenticate service requests.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.Culture">
            <summary>
            Gets or sets the string value for the culture.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.Children">
            <summary>
            Gets the collection of child elements of the map.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.Mode">
            <summary>
            Gets or sets the current map mode.
            </summary>
            <value>The current map mode.</value>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.ModeCrossFadeDuration">
            <summary>
            Gets or sets the duration for the cross fade that occurs when a new map mode is set. Default is 500ms.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.AnimationLevel">
            <summary>
            Gets or sets whether the map animates or snaps when the view is changed or when user interacts with the map.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.TargetCenter">
            <summary>
            Gets the target location that appears at the center of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.TargetNormalizedMercatorCenter">
            <summary>
            Gets the target location in normalized mercator coordinates ((lon, lat) maps to [(0,0), (1,1)]) that appears
            at the center of the viewport.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.TargetZoomLevel">
            <summary>
            Gets the target zoom level.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.TargetHeading">
            <summary>
            Gets the target Heading
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.ViewportSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.BoundingRectangle">
            <summary>
            Gets the minimal LocationRect that contains current view. 
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.MapCore.ViewChangeOnFrame">
            <summary>
            Triggered when the view is changed every frame when view is animating
            If animation is off, will fire once when the new frame is rendered
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.MapCore.TargetViewChanged">
            <summary>
            Triggered when target view towards which the map is animating is changed. 
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.MapCore.ViewChangeStart">
            <summary>
            Triggered when the view starts changing.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.MapCore.ViewChangeEnd">
            <summary>
            Triggered when the view is done changing.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.MapCore.ModeChanged">
            <summary>
            Triggered when the map mode is changed
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.ViewBeingSetByUserInput">
            <summary>
            Gets or sets a value indicating whether the view is being set by user input, such as mouse, touch, etc.
            If false, then presumably the view is being set programmatically by the client of the control, and is not subject
            to animation if the animation is set to UserInput.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.ZoomAndRotateOrigin">
            <summary>
            Gets or sets the origin about which zoom and rotation of the view occurs. If any zooming or rotation
            occurs during the setting of the view or during an animation, then map location at this point
            will remain fixed on the screen, thereby overriding any other updates to the view's map center.
            Any time a map view is set that specifies the map point at the center of the view, the zoom and
            rotate origin is set to null.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.MapForegroundContainer">
            <summary>
            Gets the container that holds the map foreground.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapCore.ViewIsAnimating">
            <summary>
            Gets or sets a value indicating whether the view is currently animating.
            </summary>
            <value>
              <c>true</c> if view is currently animating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Design.ApplicationIdCredentialsProviderConverter">
            <summary>
            Converts a string to an instance of ApplicationIdCredentialsProvider
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.ApplicationIdCredentialsProviderConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to ApplicationIdCredentialsProvider, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.ApplicationIdCredentialsProviderConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to ApplicationIdCredentialsProvider, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.ModeBackground">
            <summary>
            Describes the basic background of the mode so the foreground controls can
            choose an appropriate foreground.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.ModeBackground.Light">
            <summary>
            Mode typically has a light(white) background.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.ModeBackground.Dark">
            <summary>
            Mode typically has a dark background.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.RasterTileSource">
            <summary>
            A tile source for TilePyramidRenderable whose tiles are simple downloaded images.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileSource.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,Microsoft.Maps.MapExtras.RasterTileDownloader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.RasterTileSource"/> class.
            </summary>
            <param name="finestLodWidth">The width of the tile pyramid in pixels at its finest level of detail.</param>
            <param name="finestLodHeight">The height of the tile pyramid in pixels at its finest level of detail.</param>
            <param name="tileWidth">The width of the tiles in pixels.</param>
            <param name="tileHeight">The height of the tiles in pixels.</param>
            <param name="minimumLevelOfDetail">The minimal level of detail, i.e. the coarsest resolution, available in the tile pyramid.</param>        
            <param name="rasterTileDownloader"></param>
            <param name="useGlobalMemoryCache"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileSource.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,Microsoft.Maps.MapExtras.RasterTileDownloader,Microsoft.Maps.MapExtras.TileWrap,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.RasterTileSource"/> class.
            Uses a single tile pyramid that is repeated a number of times in either the horizontal or vertical
            dimension. This produces a tile tile pyramid that's comprised of many copies of a logical tile pyramid. 
            The width and height of the resulting tile source and its minimum and maximum levels of detail reflect 
            that of the virtual pyramid.
            </summary>
            <param name="logicalFinestLodWidth">The width of the logical tile pyramid in pixels at its finest level of detail.</param>
            <param name="logicalFinestLodHeight">The height of the logical tile pyramid in pixels at its finest level of detail.</param>
            <param name="tileWidth">The width of the tiles in pixels.</param>
            <param name="tileHeight">The height of the tiles in pixels.</param>
            <param name="logicalMinimumLevelOfDetail">The minimal level of detail, i.e. the coarsest resolution, available in the logical tile pyramid.</param>        
            <param name="rasterTileDownloader"></param>
            <param name="tileWrap"></param>
            <param name="log2DuplicatePyramidCount">2^log2DuplicatePyramidCount is the number of copies of the logical tile pyramid used.</param>
            <param name="useGlobalMemoryCache"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileSource.ConstructCommon(Microsoft.Maps.MapExtras.RasterTileDownloader,System.Boolean)">
            <summary>
            Do work common to all constructors.
            </summary>
            <param name="rasterTileDownloader"></param>
            <param name="useGlobalMemoryCache"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileSource.SetRelevantTiles(System.Collections.Generic.IList{System.Tuple{Microsoft.Maps.MapExtras.TileId,System.Nullable{System.Int32}}})">
            <summary>
            Provides a list of all tiles that are currently relevant to rendering the scene. Any tiles that were previously 
            returned from GetTile and are no longer in this list are elibible to be destroyed/re-used/etc. 
            </summary>
            <param name="relevantTiles">The list of relevant tiles. The int specifies the priority of the tile, where 
            higher values should be downloaded before lower values. A value of null indicates that the tile should not
            be downloaded, but it should be considered relevant.
            </param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileSource.GetTile(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileRenderable@,System.Boolean@)">
            <summary>
            Gets a tile that was reported as relevant using SetRelevantTiles. The tile may or may not be present yet.
            </summary>
            <param name="tileId"></param>
            <param name="tileRenderable">If null and tileWillNeverBeAvailable is false, then the tile simply isn't available yet.</param>
            <param name="tileWillNeverBeAvailable">
            If true, then the tile will never be available, either because it was never expected to be present, it was not found on the server, etc.
            </param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.TileFadeInDuration">
            <summary>
            The amount of time it takes for new tiles to fade in. If null, then the duration is zero.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.FinestLodWidth">
            <summary>
            The width of the tile pyramid in pixels at its finest level of detail.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.FinestLodHeight">
            <summary>
            The height of the tile pyramid in pixels at its finest level of detail.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.TileWidth">
            <summary>
            The tile width in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.TileHeight">
            <summary>
            The tile height in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.MinimumLevelOfDetail">
            <summary>
            The minimal level of detail, i.e. the coarsest resolution, available in the tile pyramid.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.MaximumLevelOfDetail">
            <summary>
            The maximum level of detail, i.e. the finest resolution, available in the tile pyramid.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.Clip">
            <summary>
            An optional clip rectangle, specified in pixels at the finest level of detail.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.Transform">
            <summary>
            A transform that should be applied to the tile source before rendering it.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapExtras.RasterTileSource.NewTilesAvailable">
            <summary>
            Fired whenever a new tile becomes available.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RasterTileSource.MostRelevantTileMetadata">
            <summary>
            Gets the metadata for most relevant tile
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.RasterTileAvailableDelegate">
            <summary>
            Delegate that provides a tile contained in a BitmapSource.
            </summary>
            <param name="image">The image that contains the tile.</param>
            <param name="tileSubregion">
            The subregion of the image that contains the tile. It must have integer values. For example, a 254x254 tile contained
            in a 256x256 image that has 1 pixel overlap borders would supply Rect(1,1,254,254).
            </param>
            <param name="metadata">
            Metadata for this tile taken from http headers. May be null if there is no metadata from headers.
            </param>
            <param name="token">An arbitrary token provided by the caller.</param>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.RasterTileDownloader">
            <summary>
            Downloads the images for the tiles of a single tile pyramid pyramid. The tiles themselves may be a subset of the image, in the case
            of atlas images.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileDownloader.DownloadTile(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileEdgeFlags,System.Object,Microsoft.Maps.MapExtras.RasterTileAvailableDelegate,System.Int32)">
            <summary>
            Request that a specific tile be downloaded. When the tile is available, it will be returned using the given delegate. Multiple concurrent
            downloads of the same tile is not supported.
            </summary>
            <param name="tileId"></param>
            <param name="tileEdgeFlags"></param>
            <param name="token"></param>
            <param name="tileAvailableDelegate"></param>
            <param name="priority">The higher the priority, the earlier the tile will be downloaded.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileDownloader.UpdateTileDownloadPriority(Microsoft.Maps.MapExtras.TileId,System.Int32)">
            <summary>
            Updates the priority of an in-progress tile download.
            </summary>
            <param name="tileId"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileDownloader.CancelTileDownload(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Cancels an in-progress tile download.
            </summary>
            <param name="tileId"></param>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TransformTileId">
            <summary>
            A delegate that is used to transform one tile id to another. 
            </summary>
            <param name="tileId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.RasterTileCache">
            <summary>
            A cache of the images for the tiles of a single tile pyramid pyramid. Multiple RasterTileSources may consume a single tile cache.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.RasterTileCache.rasterTileCacheValues">
            <summary>
            Only use if we're not using the global MemoryCache.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.RasterTileCache.relevantTransformedTileIds">
            <summary>
            Only use if we're not using the global MemoryCache.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.RasterTileCache.rasterTileCacheValuesToRemove">
            <summary>
            Only use if we're not using the global MemoryCache.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileCache.#ctor(Microsoft.Maps.MapExtras.TilePyramidDescriptor,Microsoft.Maps.MapExtras.RasterTileDownloader,Microsoft.Maps.MapExtras.TransformTileId,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.RasterTileCache"/> class.
            </summary>
            <param name="tilePyramidDescriptor">The tile pyramid descriptor.</param>
            <param name="rasterTileDownloader">The raster tile downloader.</param>
            <param name="transformTileId">
            Delegate that transforms all tile ids that are passed to the raster tile cache, allowing 
            things like having multiple virtual tiles that refer to the same logical tile. May be null.
            </param>
            <param name="useGlobalMemoryCache">If true, the raster tiles are cached in the global MemoryCache. Otherwise, they're not cached at all by this class.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileCache.GetValue(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Gets an entry from the cache if it's available. Returns null if not.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RasterTileCache.SetRelevantTileSet(Microsoft.Maps.MapExtras.RelevantTileSet)">
            <summary>
            Provides a list of all tiles that are currently relevant to rendering the scene. Initiates downloads for those we
            don't have, updates for priorities for pending downloads, and cancels downloads for tiles that are no longer needed.
            </summary>
            <param name="relevantTileSet"></param>
        </member>
        <member name="E:Microsoft.Maps.MapExtras.RasterTileCache.NewTilesAvailable">
            <summary>
            Fired whenever a new tile becomes available.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.MemoryCacheObjectSizeChangedEventArgs">
            <summary>
            Fired when a MemoryCacheObject size changes.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Credentials">
            <summary>
            Class that contains the credentials used to authenticate the service request.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Credentials.op_Equality(Microsoft.Maps.MapControl.WPF.Credentials,Microsoft.Maps.MapControl.WPF.Credentials)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="credentials1">The left credentials.</param>
            <param name="credentials2">The right credentials.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Credentials.op_Inequality(Microsoft.Maps.MapControl.WPF.Credentials,Microsoft.Maps.MapControl.WPF.Credentials)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="credentials1">The left credentials.</param>
            <param name="credentials2">The right credentials.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Credentials.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Credentials.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Credentials.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Credentials.ApplicationId">
            <summary>
            Gets or sets a string representing the ApplicationId.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Credentials.Token">
            <summary>
            Gets or sets a string representing the client token.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.QuadKey">
            <summary>
            Represents a Virtual Earth QuadKey.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.QuadKey.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an instance of QuadKey.
            </summary>
            <param name="x">X coordinate of the tile.</param>
            <param name="y">Y coordinate of the tile.</param>
            <param name="zoomLevel">Zoom level of the quadKey.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.QuadKey.#ctor(System.String)">
            <summary>
            Create an instance of QuadKey.
            </summary>
            <param name="quadKey">QuadKey string.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.QuadKey.QuadPixelToQuadKey(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given XY tile to quadkey, for given zoom level
            </summary>
            <param name="x">X coordinate of the tile.</param>
            <param name="y">Y coordinate of the tile.</param>
            <param name="zoomLevel">Zoom level of the tile.</param>
            <returns>QuadKey of the tile.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.QuadKey.QuadKeyToQuadPixel(System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculates the XY pixel for given quadkey
            </summary>
            <param name="quadKey">Quadkey of the tile.</param>
            <param name="x">X coordinate of the tile.</param>
            <param name="y">Y coordinate of the tile.</param>
            <param name="zoomLevel">Zoom level of the tile.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.QuadKey.op_Equality(Microsoft.Maps.MapControl.WPF.Core.QuadKey,Microsoft.Maps.MapControl.WPF.Core.QuadKey)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.QuadKey.op_Inequality(Microsoft.Maps.MapControl.WPF.Core.QuadKey,Microsoft.Maps.MapControl.WPF.Core.QuadKey)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.QuadKey.Equals(System.Object)">
            <summary>
            Equals override.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.QuadKey.GetHashCode">
            <summary>
            GetHashCode override.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.QuadKey.ZoomLevel">
            <summary>
            Zoom level of the tile.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.QuadKey.X">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.QuadKey.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.QuadKey.Key">
            <summary>
            QuadKey of the tile.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility">
            <summary>
            Helper classs for mercator projection based conversions.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility.MercatorLatitudeLimit">
            <summary>
            Maximum allowed latitude in Mercator space.
            Calculated as Math.Floored number of LogicalPointToLocation(new Point(0,0)).Latitude.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility.EarthRadiusInMeters">
            <summary>
            Radius of the earth in meters, treating WGS84 as a sphere
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility.EarthCircumferenceInMeters">
            <summary>
            Circumference of the earth in meters
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility.LocationToLogicalPoint(Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Convert Location to a logical point (90..-90 is converted to 0..1, and -180..180 to 0..1)
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility.LogicalPointToLocation(System.Windows.Point)">
            <summary>
            Converts a logical point to lat long (logical hight 0..1 is converted to 90..-90, logical width 0..1 to -180..180)
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility.ZoomToScale(System.Windows.Size,System.Double,Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Compute the meters per pixel at the given latlong.
            </summary>
            <param name="logicalAreaSizeInScreenSpaceAtLevel1"></param>
            <param name="zoomLevel"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility.ScaleToZoom(System.Windows.Size,System.Double,Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Compute the zoom at the given latlong and scale.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MercatorUtility.DegreesToRadians(System.Double)">
            <summary>
            Converts a value from degrees to radians
            </summary>
            <param name="deg">The value in degrees</param>
            <returns>The value in radians</returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.IResourceHelper`1">
            <summary>
            Interface to help working with generated resource classes.
            </summary>
            <typeparam name="TResource"></typeparam>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.IResourceHelper`1.CreateResource">
            <summary>
            Creates an instance of the resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.IResourceHelper`1.SetResourceCulture(`0,System.Globalization.CultureInfo)">
            <summary>
            Sets the resource culture.
            </summary>
            <param name="resource">Resource instance.</param>
            <param name="culture">Culture.</param>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorStrings.InvalidCredentialsErrorMessage">
            <summary>
              Looks up a localized string similar to Invalid Credentials. Sign up for a developer account at: http://www.microsoft.com/maps/developers.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorStrings.LoadingConfigurationErrorMessage">
            <summary>
              Looks up a localized string similar to Unable to contact Server. Please try again later..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorStrings.LoadingUriSchemeErrorMessage">
            <summary>
              Looks up a localized string similar to Map loaded in unsupported Uri Scheme. Please reload page in &quot;http&quot; scheme..
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.VectorMath">
            <summary>
            Adds convex polygon clipping to the VectorMath class. Lives in a seperate file due to
            to the amount of code involved, but not a seperate class to reduce the size in the resulting assembly.
            </summary>
            <summary>
            Mathematical operations for dealing with vectors and matrixes.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.VectorMath.DegreesPerRadian">
            <summary>
            Degrees per radian
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.VectorMath.RadiansPerDegree">
            <summary>
            Radians per degree
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.ClipConvexPolygon(Microsoft.Maps.MapExtras.RectangularSolid,Microsoft.Maps.MapExtras.Point4D[],Microsoft.Maps.MapExtras.Point2D[],System.Int32,Microsoft.Maps.MapExtras.Point4D[],Microsoft.Maps.MapExtras.Point2D[],System.Int32@,Microsoft.Maps.MapExtras.Point4D[],Microsoft.Maps.MapExtras.Point2D[])">
            <summary>
            Clips a convex polygon against the provided clip volume in homogenous coordinates. Results
            are undefined for a concave polygon or a polygon with overlapping edges.
            </summary>
            <param name="clipBounds">The bounds in X, Y, Z of the clipping, e.g. [(-1,-1,0), (+1,+1,1)].</param>
            <param name="poly">The polygon to clipped.</param>
            <param name="polyTextureCoords">Texture coordinates associated with the poly. May be null.</param>
            <param name="polyVertexCount">The number of vertices in the polygon to be clipped.</param>
            <param name="clippedPoly">The resulting clipped poly. This array must be at least polyVertexCount + 6 in length.</param>
            <param name="clippedPolyTextureCoords">The texture coordinates of the resulting clipped poly. May be null if polyTextureCoords is null. The array must be at least polyVertexCount + 6 in length.</param>
            <param name="clippedPolyVertexCount">The number of vertices in the clipped polygon.</param>
            <param name="tempVertexBuffer">A buffer that's used for temporary storage in the algorithm. This array must be at least polyVertexCount + 6 in length.</param>
            <param name="tempTextureCoordBuffer">A buffer that's used for temporary storage in the algorithm. May be null if polyTextureCoords is null. This array must be at least polyVertexCount + 6 in length.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the value to be in the specified range.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamps the value to be in the specified range.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.CeilLog2(System.Int64)">
            <summary>
            Returns the ceiling of the log base 2 of the value.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.DivPow2RoundUp(System.Int64,System.Int32)">
            <summary>
            Divides by 2^power, rounding up.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.DivRoundUp(System.Int64,System.Int64)">
            <summary>
            Divides the value by the denominator, rounding up.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the value to [min,max].
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.NormalizeAngle(System.Double)">
            <summary>
            Normalizes angle in degrees to fall in 0-360 range.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.AngleDelta(System.Double,System.Double)">
            <summary>
            Finds delta between two angles in degrees.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Add(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Adds two 3D points
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Subtract(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Substracts two 3D points
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Add(System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds two 2D points
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Adds two 2D points
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Multiply(System.Windows.Point,System.Double)">
            <summary>
            Multiplies a point by a scalar
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Multiply(Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Multiplies a 3D point by a scalar
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Distance(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Calculates distance between two 3D points
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates distance between two 2D points
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.GetLength(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Calculates length of a 3D point, treated as a vector
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.GetLength(System.Windows.Point)">
            <summary>
            Calculates length of a 2D point, treated as a vector
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Lerp(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D,System.Double)">
            <summary>
            Linealy interpolats between two points
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Normalize(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Normalizes a 3D point, treated as a vector
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Dot(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Dot product of two points treated as vectors.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Cross(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Cross product of two points treated as vectors.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Multiplies given Matrixes
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Invert(System.Windows.Media.Matrix)">
            <summary>
            Inverts given Matrix
            </summary>
            <param name="matrix">Matrix to invert</param>
            <returns>Inverted matrix</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.InferTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Retruns a Matrix which translates the "from" to "to"
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.UnitToPoints(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates a matrix that would translate: (0,0);(1,0);(0,1) to to1;to2;to3
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Conversion(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates a matrix that would translate given three source points to given three destination points
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Transform(System.Windows.Media.Media3D.Matrix3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Uses given matix to transform a point.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Transform(System.Windows.Media.Media3D.Matrix3D,Microsoft.Maps.MapExtras.Point4D)">
            <summary>
            Uses given matix to transform a Vector4D
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.TranslationMatrix3D(Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Retruns a matrix 3D that translates by given offset
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.TranslationMatrix3D(System.Double,System.Double,System.Double)">
            <summary>
            Retruns a matrix 3D that translates by given offset
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.ScalingMatrix3D(System.Double,System.Double,System.Double)">
            <summary>
            Builds a Scaling matrix.
            </summary>
            <param name="valueX">Amount to scale along the X axis.</param>
            <param name="valueY">Amount to scale along the Y axis.</param>
            <param name="valueZ">Amount to scale along the Z axis.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.RotationMatrix3DX(System.Double)">
            <summary>
            Builds a matrix that rotates around the x-axis. Uses row vector notation. In order to rotate a
            vector v about the X axis the vector must be POST multiplied by this matrix like this: v*M
            where v is the row vector and M is matrix.
            </summary>
            <param name="angle">Angle of rotation, in radians. Angles are
            measured clockwise when looking along the rotation axis toward the
            origin in a left handed coordinate system, and counter-clockwise in
            a right handed.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.RotationMatrix3DY(System.Double)">
            <summary>
            Builds a matrix that rotates around the y-axis.
            Uses row vector notation. In order to rotate a
            vector v about the Y axis the vector must be POST multiplied by this matrix like this: v*M
            where v is the row vector and M is matrix.
            </summary>
            <param name="angle">Angle of rotation, in radians. Angles are
            measured clockwise when looking along the rotation axis toward the
            origin in a left handed coordinate system, and counter-clockwise in
            a right handed.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.RotationMatrix3DZ(System.Double)">
            <summary>
            Builds a matrix that rotates around the z-axis.
            Uses row vector notation. In order to rotate a
            vector v about the Z axis the vector must be POST multiplied by this matrix like this: v*M
            where v is the row vector and M is matrix.
            </summary>
            <param name="angle">Angle of rotation, in radians. Angles are
            measured clockwise when looking along the rotation axis toward the
            origin in a left handed coordinate system, and counter-clockwise in
            a right handed.</param>
            <returns>The requested matrix.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.ConvertMatrixToMatrix3D(System.Windows.Media.Matrix)">
            <summary>
            Converts a 2D matrix to a 3D matrix.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.GetAxisRedefinitionMatrix(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Creats a matrix that redefines the axises.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.ProjectOnPlane(System.Windows.Media.Media3D.Matrix3D,Microsoft.Maps.MapExtras.Plane3D)">
            <summary>
            Retruns a matrix that translates the "screen" plane to given plane.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.PerspectiveMatrix3D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Builds a left-handed perspective projection matrix based on a field of view. 
            </summary>
            <param name="fieldOfViewY">Field of view in the y direction, in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as the view space width divided by height.</param>
            <param name="zNearPlane">Z-value of the near view plane.</param>
            <param name="zFarPlane">Z-value of the far view plane.</param>
            <returns>A matrix structure that is a left-handed perspective projection matrix.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.GetCorners(System.Windows.Rect)">
            <summary>
            Gets four corner points of a rectangle.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.IntersectLineToPlane(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Plane3D)">
            <summary>
            Intersects a plane by a line, and returns the intersection point
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.LinePointDistanceSquared(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D,System.Boolean@)">
            <summary>
            Returns the square of the minimum distance between the point p and the line passing through points line0 and line1.
            </summary>
            <param name="line0"></param>
            <param name="line1"></param>
            <param name="point"></param>
            <param name="inLineSegment">True if the point on the line that is closest to p is within the line segment [line0,line1].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.Swap``1(``0@,``0@)">
            <summary>
            Swaps the left and right elements.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.TileSourceGetUriWrapper(Microsoft.Maps.MapControl.WPF.TileSource,Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Convenience function for converting the long-based TileId to values that MapControl.TileSource understands.
            </summary>
            <param name="tileSource"></param>
            <param name="tileId"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.VectorMath.OrientedBoundingBoxIntersectsAxisAlignedBoundingBox(Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.Point2D,System.Double,System.Windows.Rect)">
            <summary>
            Tests if an oriented bounding box intersects an axis-aligned bounding box.
            </summary>
            <param name="orientedBBox0">One endpoint of the oriented bounding box.</param>
            <param name="orientedBBox1">The other endpoint of the oriented bounding box.</param>
            <param name="orientedBBoxWidth">The width of the oriented bounding box, perpendicular to the line connecting the endpoints.</param>
            <param name="axisAlignedBBox"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TilePriorityCalculator">
            <summary>
            Given a view of a particular LOD of a tile pyramid, calculates the priorities with which the tiles in view
            shoudl be downloaded.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TilePriorityCalculator.NumFoveationPriorityBuckets">
            <summary>
            The number of priority buckets into which we divide the screen. Tile priorities get values in [0, numBuckets). 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePriorityCalculator.Initialize(Microsoft.Maps.MapExtras.TilePyramidDescriptor,System.Windows.Media.Media3D.Matrix3D@,Microsoft.Maps.MapExtras.Point2D,Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Initializes the tile priority calculator with a view.
            </summary>
            <param name="tilePyramid"></param>
            <param name="renderableToViewportTransform"></param>
            <param name="viewportSize"></param>
            <param name="visibleTileId"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePriorityCalculator.GetPriority(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Gets a priority of a tile in the view.
            </summary>
            <param name="tileId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TileId">
            <summary>
            Identifies a tile in a tile pyramid
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.#ctor(System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.TileId"/> struct.
            </summary>
            <param name="levelOfDetail">The level of detail.</param>
            <param name="x">The x-coord.</param>
            <param name="y">The y-coord.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.GetParent">
            <summary>
            Returns the id of the parent tile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.op_Subtraction(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Returns a tile that represents the difference between left and right where right is a child of left.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.IsChildOf(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Returns true if the provided tile is a child of this tile.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.GetChildIndex(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Returns an index for the child in [0,4): 
                0 for the top-left child 
                1 for top-right
                2 for bottom-left
                3 for bottom-right.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.GetChildren">
            <summary>
            Returns the four children of this tile.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.GetRequestCode">
            <summary>
            Returns the string that represents the request code for this tile.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.GetHashCode">
            <summary>
            Override GethashCode
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.Equals(System.Object)">
            <summary>
            Override Equals
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.op_Equality(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Test for equality
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.op_Inequality(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Test for inequality
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.op_LessThan(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Less than operator
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.op_GreaterThan(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Greater than operator
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.ToString">
            <summary>
            Override ToString
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileId.CompareTo(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Implements IComparable's CompareTo method
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileId.LevelOfDetail">
            <summary>
            The level of detail of the tile
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileId.X">
            <summary>
            The X component of the tile's position
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileId.Y">
            <summary>
            The Y component of the tile's position
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileId.HasParent">
            <summary>
            Returns true if this tile has a parent (the coarsest level of detail does not have a parent.)
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.ExceptionStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.ConfigurationException_InvalidLoad">
            <summary>
              Looks up a localized string similar to Configuration must be loaded before the map loads, and can only be loaded once..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.ConfigurationException_NullXml">
            <summary>
              Looks up a localized string similar to XmlReader used to initialize the configuration cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.IProjectable">
            <summary>
              Looks up a localized string similar to IProjectable elements can only reside under other IProjectable elements or Map control directly..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.LocationToViewportPoint_DefaultException">
            <summary>
              Looks up a localized string similar to Invalid location..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.MapConfiguration_GetSection_NonNull">
            <summary>
              Looks up a localized string similar to version and sectionName parameter cannot be empty or null..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.MapConfiguration_ParseConfiguration_DuplicateNodeKey">
            <summary>
              Looks up a localized string similar to Nodes within the same section cannot have the same key &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.MapConfiguration_ParseConfiguration_DuplicateSection">
            <summary>
              Looks up a localized string similar to Sections cannot have the same sectionName (&quot;{0}&quot;), version (&quot;{1}&quot;) and culture (&quot;{2}&quot;)..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.MapConfiguration_ParseConfiguration_InvalidRoot">
            <summary>
              Looks up a localized string similar to Unsupported root node &quot;{0}&quot; in configuration xml..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.MapConfiguration_ParseConfiguration_InvalidSection_NoVersion">
            <summary>
              Looks up a localized string similar to Sections must have version attribution..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.MapConfiguration_ParseConfiguration_InvalidTag">
            <summary>
              Looks up a localized string similar to Unsupported Tag &quot;{0}&quot; in configuration xml..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.MapConfiguration_WebService_InvalidResult">
            <summary>
              Looks up a localized string similar to Invalid Result return by MapControlConfiguration service..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TypeConverter_InvalidApplicationIdCredentialsProvider">
            <summary>
              Looks up a localized string similar to Invalid type for ApplicationIdCredentialsProvider. Only able to convert strings..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TypeConverter_InvalidMapMode">
            <summary>
              Looks up a localized string similar to Invalid string or type for MapMode..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TypeConverter_InvalidRangeFormat">
            <summary>
              Looks up a localized string similar to Invalid format or type for Range. Only able to convert strings with formats, \&quot;{0} {1}\&quot; or \&quot;{0},{1}\&quot; where {0} and {1} are valid doubles or ints..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.ViewportPointToLocation_DefaultException">
            <summary>
              Looks up a localized string similar to Invalid viewportPoint..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.InvalidMode">
            <summary>
              Looks up a localized string similar to newMode.Content is already part of the visual tree.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TileSource_InvalidSubdomain_stringNull">
            <summary>
              Looks up a localized string similar to Subdomains cannot have null strings..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TileSource_InvalidSubdomains_DifferentLength">
            <summary>
              Looks up a localized string similar to Subdomain array must have all columns of the same length..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TileSource_InvalidSubdomains_LengthMoreThan0">
            <summary>
              Looks up a localized string similar to Subdomain array must have a length that is more than 0..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TypeConverter_InvalidLocationCollection">
            <summary>
              Looks up a localized string similar to Invalid type for LocationCollection. Only able to convert strings..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TypeConverter_InvalidLocationFormat">
            <summary>
              Looks up a localized string similar to Invalid format or type for Location. Only able to convert strings with format \&quot;{0},{1}\&quot; or \&quot;{0},{1},{2}\&quot;, where {0}, {1} and {2} are valid doubles..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TypeConverter_InvalidLocationRectFormat">
            <summary>
              Looks up a localized string similar to Invalid format or type for LocationRect. Only able to convert strings with format \&quot;{0},{1},{2},{3}\&quot; where {0}, {1}, {2} and {3} are valid doubles..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ExceptionStrings.TypeConverter_InvalidPositionOriginFormat">
            <summary>
              Looks up a localized string similar to Invalid format or type for PositionOrigin. Only able to convert strings with formats, \&quot;{0},{1}\&quot; where {0} and {1} are valid doubles, or a string representing a PositionOrigin value such as \&quot;TopLeft\&quot;, \&quot;TopCenter\&quot;, \&quot;TopRight\&quot;, \&quot;CenterLeft\&quot;, \&quot;Center\&quot;, \&quot;CenterRight\&quot;, \&quot;BottomLeft\&quot;, \&quot;BottomCenter\&quot;, \&quot;BottomRight\&quot;..
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager">
            <summary>
            Class that gets the copyright strings.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.retryFailedFetchAt">
            <summary>
            Dictionary that keeps track of failures to fetch copyright so retry can be throttled.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.minimumRetryInterval">
            <summary>
            Throttle on how often will try to fetch copyright data upon a failure.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.#ctor(System.String,System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager"/> class from being created.
            </summary>
            <param name="culture">culture</param>
            <param name="session">Session key</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.AsynchronousConfigurationLoaded(Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection,System.Object)">
            <summary>
            Callback when configuration loads
            </summary>
            <param name="config"></param>
            <param name="userState"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.GetInstance(System.String,System.String)">
            <summary>
            Gets a Copyright instance with an associated configuration.
            Same configuration will get the same CopyrightManager so that it's able to do caching.
            </summary>
            <returns>An instance of CopyrightManager</returns>
            <param name="culture">culture to use</param>
            <param name="session">session key</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.GetCleanInstance(System.String,System.String)">
            <summary>
            Get a clean instance for unit testing.  Only use for unit testing.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.defaultCopyrightCache">
            <summary>
            Cache copyright string for the culture .. can be static since it doesn't depend on configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.DefaultCopyright(System.String)">
            <summary>
            In the case the fetch of the copyright fails, use this as the default.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.RequestCopyrightString(System.Nullable{Microsoft.Maps.MapControl.WPF.PlatformServices.MapStyle},Microsoft.Maps.MapControl.WPF.LocationRect,System.Double,Microsoft.Maps.MapControl.WPF.Core.CredentialsProvider,System.String,System.Action{Microsoft.Maps.MapControl.WPF.Core.CopyrightResult})">
            <summary>
            This is the call made to ask the copyright manager to get an array of copyright strings.  Once the data is
            available, a callback is made on the callback passed in as a parameter.
            </summary>
            <param name="style">Map style</param>
            <param name="boundingRectangle">bounds of the map view</param>
            <param name="zoomLevel">Zoom level of the map</param>
            <param name="credentialsProvider">CredentialsProvider from the Map</param>
            <param name="culture">Culture setting for the Map</param>
            <param name="copyrightCallback">Callback to make when the data is available</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.RequestCopyrightString(System.Nullable{Microsoft.Maps.MapControl.WPF.PlatformServices.MapStyle},Microsoft.Maps.MapControl.WPF.LocationRect,System.Double,Microsoft.Maps.MapControl.WPF.Credentials,System.String,System.Action{Microsoft.Maps.MapControl.WPF.Core.CopyrightResult})">
            <summary>
            This is the call made to ask the copyright manager to get an array of copyright strings.  Once the data is
            available, a callback is made on the callback passed in as a parameter.
            </summary>
            <param name="style">Map style</param>
            <param name="boundingRectangle">bounds of the map view</param>
            <param name="zoomLevel">Zoom level of the map</param>
            <param name="credentials">Credentials use to make request</param>
            <param name="culture">Culture setting for the Map</param>
            <param name="copyrightCallback">Callback to make when the data is available</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.CopyrightRequestCompleted(System.Object,System.Net.DownloadStringCompletedEventArgs)">
            <summary>
            Response to Copyright request 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.ClipLatitude(System.Double)">
            <summary>
            Clip Latitude within -85 to 85
            </summary>
            <param name="latitude">latitude</param>
            <returns>clipped latitude</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.ClipLongitude(System.Double)">
            <summary>
            Clip Longitude within -180 to 180
            </summary>
            <param name="longitude">longitude</param>
            <returns>clipped longitude</returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightManager.IsInDesignMode">
            <summary>
            Is In design mode?
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapItemsControl">
            <summary>
            MapItemsControl is an ItemsControl derived class that uses a MapLayer
            as ItemsPanel. This enables data binding via ItemsSource and ItemTemplate
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MapItemsControl"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TileUriDelegate">
            <summary>
            Given a tile returns the URI where that tile is located.
            </summary>
            <param name="tileId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TileImageDelegate">
            <summary>
            Given a tile returns the URI where that tile is located.
            </summary>
            <param name="tileId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.OverlapBorderPresence">
            <summary>
            Species the overlap borders that are present in the source imagery. All images that the downloader
            returns have borders on all edges, so they will be added if not present in the source.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.OverlapBorderPresence.None">
            <summary>
            There are no overlap borders. Each image is the size of the tile. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.OverlapBorderPresence.OnInteriorEdges">
            <summary>
            Overlap borders on edges where tiles meet, but no on the edge of the image, such
            as in the Seadragon DZI format.
            </summary>        
        </member>
        <member name="F:Microsoft.Maps.MapExtras.OverlapBorderPresence.OnAllEdges">
            <summary>
            Overlap borders on all edges. 
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.GenericRasterTileDownloader">
            <summary>
            Performs the work of downloading an image and potentially adding overlap borders to it.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.GenericRasterTileDownloader.HeaderMetadataPrefix">
            <summary>
            Prefix for headers we should store as metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.GenericRasterTileDownloader.#ctor(Microsoft.Maps.MapControl.WPF.TileSource,Microsoft.Maps.MapExtras.OverlapBorderPresence,System.Windows.Threading.Dispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.GenericRasterTileDownloader"/> class.
            </summary>
            <param name="tileSource">The tile soruce to use. If the delegate for the URI returns null, direct btimap will be used. If that  
            returns null for a given tile, it is assumed that the tile will never be available.</param>
            <param name="overlapBordersPresence">Specifies the presence of overlap borders in the source imagery.</param>
            <param name="uiThreadDispatcher">The UI thread dispatcher.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.GenericRasterTileDownloader.DownloadTile(Microsoft.Maps.MapExtras.TileId,Microsoft.Maps.MapExtras.TileEdgeFlags,System.Object,Microsoft.Maps.MapExtras.RasterTileAvailableDelegate,System.Int32)">
            <summary>
            Request that a specific tile be downloaded. When the tile is available, it will be returned using the given delegate. Multiple concurrent
            downloads of the same tile is not supported.
            </summary>
            <param name="tileId"></param>
            <param name="tileEdgeFlags"></param>
            <param name="token"></param>
            <param name="tileAvailableDelegate"></param>
            <param name="priority">The higher the priority, the earlier the tile will be downloaded.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.GenericRasterTileDownloader.UpdateTileDownloadPriority(Microsoft.Maps.MapExtras.TileId,System.Int32)">
            <summary>
            Updates the priority of an in-progress tile download.
            </summary>
            <param name="tileId"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.GenericRasterTileDownloader.CancelTileDownload(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Cancels an in-progress tile download.
            </summary>
            <param name="tileId"></param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.GenericRasterTileDownloader.OverlapBorderPresence">
            <summary>
            Species the overlap borders that are present in the source imagery. All images that the downloader
            returns have borders on all edges, so they will be added if not present in the source.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.GenericRasterTileDownloader.ProvideMissingTileImage">
            <summary>
            Delegate that provides an image for a tile if the image has been found to not be available at the given URL. May 
            return null, which is the behavior if the delegate is not set.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.LocationRect">
            <summary>
            Location rectangle defined by North, West, South and East bounds
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.LocationRect"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.#ctor(Microsoft.Maps.MapControl.WPF.Location,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.LocationRect"/> class.
            </summary>
            <param name="center">The center.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.LocationRect"/> class.
            </summary>
            <param name="north">The north bound.</param>
            <param name="west">The west bound.</param>
            <param name="south">The south bound.</param>
            <param name="east">The east bound.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.#ctor(Microsoft.Maps.MapControl.WPF.Location,Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.LocationRect"/> class. The resulting
            <see cref="T:Microsoft.Maps.MapControl.WPF.LocationRect"/> will contain the two given locations.
            </summary>
            <param name="corner1">The first corner.</param>
            <param name="corner2">The second corner.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.#ctor(System.Collections.Generic.IList{Microsoft.Maps.MapControl.WPF.Location})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.LocationRect"/> class. The resulting
            <see cref="T:Microsoft.Maps.MapControl.WPF.LocationRect"/> contains all of the given locations.
            </summary>
            <param name="locations">The locations.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.#ctor(Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.LocationRect"/> class.
            </summary>
            <param name="rect">The other location rect.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.op_Equality(Microsoft.Maps.MapControl.WPF.LocationRect,Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="rect1">The left location rect.</param>
            <param name="rect2">The right location rect.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.op_Inequality(Microsoft.Maps.MapControl.WPF.LocationRect,Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="rect1">The left location rect.</param>
            <param name="rect2">The right location rect.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.Intersects(Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Checks to see if the rect passed as a parameter intersects this instance.
            </summary>
            <param name="rect">The location rect.</param>
            <returns><c>true</c> if the given location rect intersects this instance.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.Intersection(Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Computes the intersection of the rect passed in as a parameter and this instance.
            Note that in a world wrap location Rect, 2 locationRect intersection can create more than 1 locationRect. This methods does not handle those cases.
            </summary>
            <param name="rect">The location rect.</param>
            <returns>The intersection of the given rect with this instance.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance, using the given format provider.
            </summary>
            <param name="provider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.LocationRect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="provider">The provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.North">
            <summary>
            Gets or sets the North bound.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.West">
            <summary>
            Gets or sets the West bound.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.South">
            <summary>
            Gets or sets the South bound.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.East">
            <summary>
            Gets or sets the East bound.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.Center">
            <summary>
            Gets the center of the location rect.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.Width">
            <summary>
            Gets the difference between the West and East latitudes.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.Height">
            <summary>
            Gets the difference between the North and South longitudes.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.Northwest">
            <summary>
            Gets the Northwest corner.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.Northeast">
            <summary>
            Gets or sets the Northeast corner.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.Southeast">
            <summary>
            Gets the Southeast corner.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.LocationRect.Southwest">
            <summary>
            Gets or sets the Southwest corner.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.AnimationLevel">
            <summary>
            Specifies when the map should animate.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AnimationLevel.None">
            <summary>
            Map will always snap to new view.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AnimationLevel.UserInput">
            <summary>
            Map will animate only when it responds to user input.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AnimationLevel.Full">
            <summary>
            Map will always animate.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.ResourceUtility.TryToGetCultureInfo(System.String,System.Globalization.CultureInfo@)">
            <summary>
            Given a culture name, gets a CultureInfo object.  This is a TryGet routine that catches exceptions 
            if the culture isn't present on the machine.
            </summary>
            <param name="cultureName">Name of the culture</param>
            <param name="cultureInfo">CultureInfo object</param>
            <returns>true if a CultureInfo is created.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.ResourceUtility.GetCultureInfo(System.String)">
            <summary>
            Implement fallback logic to choose a culture in case its not defined on this machine.
            </summary>
            <param name="cultureName">Culture name (e.g. en-US).</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.ResourceUtility.TryToGetRegionInfo(System.String,System.Globalization.RegionInfo@)">
            <summary>
            Converts a culture name to a RegionInfo. Catches exception if the region isn't available on this machine.
            </summary>
            <param name="regionName"></param>
            <param name="regionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.ResourceUtility.GetRegionInfo(System.String)">
            <summary>
            Implement fallback logic to choose a region in case its not defined on this machine.
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.ResourceUtility.GetResource``2(System.String)">
            <summary>
            Get a resource object that is bound to the particular culture.
            </summary>
            <param name="cultureName">Culture name (e.g. en-US).</param>
            <typeparam name="TResourceClass">Type of resource class.</typeparam>
            <typeparam name="THelper"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.BezierSpline">
            <summary>
            Encapsulates code for calculating points along a bezier spline curve.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.BezierSpline.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.BezierSpline"/> class.
            </summary>
            <param name="controlPoint1">The control point1.</param>
            <param name="controlPoint2">The control point2.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.BezierSpline.GetValue(System.Double)">
            <summary>
            Gets the value along the curve at the specified position.
            </summary>
            <param name="progress">The position along the curve, scaled to fit 
            in [0,1]</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.BezierSpline.GetBezierValue(System.Double,System.Double,System.Double)">
            <summary> 
            Get an X or Y value with the Bezier formula.
            </summary>
            <param name="b">the second Bezier coefficient</param>
            <param name="c">the third Bezier coefficient</param> 
            <param name="t">the parameter value to evaluate at</param>
            <returns>the value of the Bezier function at the given parameter</returns> 
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.BezierSpline.GetXAndDx(System.Double,System.Double@,System.Double@)">
            <summary> 
            Get X and dX/dt at a given parameter 
            </summary>
            <param name="t">the parameter value to evaluate at</param> 
            <param name="x">the value of x there</param>
            <param name="dx">the value of dx/dt there</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.BezierSpline.SetParameterFromX(System.Double)">
            <summary> 
            Compute the parameter value that corresponds to a given X value, using a modified 
            clamped Newton-Raphson algorithm to solve the equation X(t) - time = 0. We make
            use of some known properties of this particular function: 
            * We are only interested in solutions in the interval [0,1]
            * X(t) is increasing, so we can assume that if X(t) > time t > solution.  We use
              that to clamp down the search interval with every probe.
            * The derivative of X and Y are between 0 and 3. 
            </summary>
            <param name="time">the time, scaled to fit in [0,1]</param> 
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.BezierSpline.ControlPoint1">
            <summary>
            Gets the first control point.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.BezierSpline.ControlPoint2">
            <summary>
            Gets the second control point.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorMessage">
            <summary>
            Silverlight control to show an error message.
            </summary>
            <summary>
            LoadingErrorMessage
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorMessage.#ctor">
            <summary>
            Constructor.  Display an Error Message when Configuration fails to load.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorMessage.SetConfigurationError(System.String)">
            <summary>
            Display a loading error.
            </summary>
            <param name="culture">Will use localized string, if it exists for this culture</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorMessage.SetUriSchemeError(System.String)">
            <summary>
            Display error due to a bad url.
            </summary>
            <param name="culture">Will use localized string, if it exists for this culture</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorMessage.SetCredentialsError(System.String)">
            <summary>
            Display error due to a invalid credentials
            </summary>
            <param name="culture">Will use localized string, if it exists for this culture</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorMessage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromFile">
            <summary>
            Class that loads the Configuration from a XmlReader
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider">
            <summary>
            Base class used to load the configuration
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider.LoadConfiguration">
            <summary>
            Loads the configuraiton.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider.GetConfigurationSection(System.String,System.String,System.String,Microsoft.Maps.MapControl.WPF.Core.MapConfigurationCallback,System.Boolean,System.Object)">
            <summary>
            The MapConfigurationCallback will be called with a MapConfigurationSection with the given version, sectionName and culture
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider.GetConfigurationKey(System.String,System.String,System.String)">
            <summary>
            Get a key for the given version, sectionName and culture
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider.GetSection(System.String,System.String,System.String)">
            <summary>
            Gets the configuration Section for the given version, sectionName and culture.
            If configuration is not found for the given culture, it tries to find a configuration for the null culture.
            Returns null if no configuration is found.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider.ContainConfigurationSection(System.String,System.String,System.String)">
            <summary>
            Checks if the Sections contains the required MapConfigurationSection
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider.ParseConfiguration(System.Xml.XmlReader)">
            <summary>
            Parse the configuration from the new xml document.
            </summary>
            <param name="sectionReader">an XmlReader</param>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider.Loaded">
            <summary>
            Event fired when configuration is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationProvider.Sections">
            <summary>
            Dictionary of all the sections
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromFile.#ctor(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Create an instance of MapConfigurationFromFile.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromFile.LoadConfiguration">
            <summary>
            Loads the configuraiton.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromFile.GetConfigurationSection(System.String,System.String,System.String,Microsoft.Maps.MapControl.WPF.Core.MapConfigurationCallback,System.Boolean,System.Object)">
            <summary>
            The MapConfigurationCallback will be called with a MapConfigurationSection with the given version, sectionName and culture
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromFile.Loaded">
            <summary>
            Event fired when configuration is loaded.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Design.MapModeConverter">
            <summary>
            Converts a string to an instance of appropriate MapMode
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.MapModeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Can convert from source type to MapMode
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.MapModeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from obect to MapMode
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value">object</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Design.MapModes">
            <summary>
            Well Known Map Modes - used only internally for reflection of known modes 
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Design.MapModes.Aerial">
            <summary>
            Aerial Mode
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Design.MapModes.AerialWithLabels">
            <summary>
            Aerial With Labels Mode
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Design.MapModes.Road">
            <summary>
            Road Mode
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring">
            <summary>
            See http://en.wikipedia.org/wiki/Damping for an explanation of its properties,
            the formulas used, and the various esoterically named constants.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.Epsilon">
            <summary>
            A really small value.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.omegaNought">
            <summary>
            The omega nought constant.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.currentValue">
            <summary>
            The current value of the spring.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.currentVelocity">
            <summary>
            The current velocity of the spring.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.targetValue">
            <summary>
            The target value of the spring.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.targetSetTime">
            <summary>
            The time at which the target value was set.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.A">
            <summary>
            The A parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.B">
            <summary>
            The B parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.#ctor">
            <summary>
            Initializes a new instance of the CriticallyDampedSpring class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the CriticallyDampedSpring class.
            </summary>
            <param name="springConstant">The spring constant.</param>
            <param name="mass">The mass of the object attached to the spring.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.SnapToValue(System.Double)">
            <summary>
            Immediately sets the spring to the provided value, leaving it with no velocity.
            </summary>
            <param name="value">The value to wich to snap the spring.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.Update">
            <summary>
            Updates the spring. This should be called before accessing the current value of the spring
            for the most up to date value. However, the value of the spring is not sensitive to how frequently this
            function is called like many spring simulations are.
            </summary>
            <returns>True if the spring value has changed, false if it has settled.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.CalculateCurrentValue(System.Double)">
            <summary>
            Calculated the current value.
            </summary>
            <param name="relativeTime">Time relative to t = 0 in seconds</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.CalculateCurrentVelocity(System.Double)">
            <summary>
            Calculated the current velocity.
            </summary>
            <param name="relativeTime">Time relative to t = 0 in seconds</param>
            <returns>The current velocity.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.Initialize">
            <summary>
            Set default initial values.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.CurrentValue">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.TargetValue">
            <summary>
            Gets or sets the target value.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.CriticallyDampedSpring.CurrentTime">
            <summary>
            Gets the current time in seconds.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.CredentialsInvalidException">
            <summary>
            Represents errors where Credentials are invalid.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CredentialsInvalidException.#ctor">
            <summary>
            Creates an instance of CredentialsInvalidException
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CredentialsInvalidException.#ctor(System.String)">
            <summary>
            Creates an instance of CredentialsInvalidException
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CredentialsInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of CredentialsInvalidException
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of instance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="F:WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the instance listening for the event.
            </summary>
        </member>
        <member name="M:WeakEventListener`3.#ctor(`0)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="instance">Instance subscribing to the event.</param>
        </member>
        <member name="M:WeakEventListener`3.OnEvent(`1,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromWeb">
            <summary>
            Class that downloads the xml from a Url and loads the configuration from the downloaded xml.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromWeb.#ctor(System.Uri)">
            <summary>
            Create an instance of MapConfigurationFromWeb
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromWeb.LoadConfiguration">
            <summary>
            Loads the configuraiton.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromWeb.GetConfigurationSection(System.String,System.String,System.String,Microsoft.Maps.MapControl.WPF.Core.MapConfigurationCallback,System.Boolean,System.Object)">
            <summary>
            The MapConfigurationCallback will be called with a MapConfigurationSection with the given version, sectionName and culture
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationFromWeb.Loaded">
            <summary>
            Event fired when configuration is loaded.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.VisualEnumerable">
            <summary>
            Provides methods for iterating through the visual tree with LINQ.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.VisualEnumerable.GetVisualOfType``1(System.Windows.DependencyObject)">
            <summary>
            Gets the Visual Tree filtered by Type for a DependencyObject with that DependencyObject as the root.
            http://petermcg.wordpress.com/2009/03/04/linq-to-visual-tree-beta/
            </summary>
            <typeparam name="T">The type of element to retrieve.</typeparam>
            <param name="element">The element.</param>
            <returns>The matching elements.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.VisualEnumerable.GetVisualTree(System.Windows.DependencyObject)">
            <summary>
            Gets the Visual Tree for a DependencyObject with that DependencyObject as the root.
            http://petermcg.wordpress.com/2009/03/04/linq-to-visual-tree-beta/
            </summary>
            <param name="element">The root element.</param>
            <returns>The matching elements.</returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TilePyramidDescriptor">
            <summary>
            Represents an abstract tile pyramid where the scale factor between
            levels of detail is 1/2 and each level of detail is tiled using a tile size that
            is global to the pyramid. It is abstract in the sense that it doesn't actually store
            any tiles -- it's just used to perform calculations like level of detail and tile
            selection based on view.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.#ctor(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.TilePyramidDescriptor"/> class.
            </summary>
            <param name="finestLevelOfDetailWidth">Width of the finest level of detail.</param>
            <param name="finestLevelOfDetailHeight">Height of the finest level of detail.</param>
            <param name="coarsestLevelOfDetail">The coarsest level of detail.</param>
            <param name="tileWidth">Width of the tile.</param>
            <param name="tileHeight">Height of the tile.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.GetLevelOfDetailWidth(System.Int32)">
            <summary>
            Returns the width of the LOD in integral pixels.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.GetLevelOfDetailHeight(System.Int32)">
            <summary>
            Returns the height of the LOD in integral pixels.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.GetLevelOfDetailWidthInTiles(System.Int32)">
            <summary>
            Returns the width of the LOD in integral tiles.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.GetLevelOfDetailHeightInTiles(System.Int32)">
            <summary>
            Returns the height of the LOD in integral tiles.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.GetTileEdgeFlags(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Returns the edge flags for the given tile id.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.GetVisibleTiles(Microsoft.Maps.MapExtras.Point2D,System.Windows.Media.Media3D.Matrix3D@,System.Boolean,System.Collections.Generic.IList{Microsoft.Maps.MapExtras.TileId},Microsoft.Maps.MapExtras.Point2D[],Microsoft.Maps.MapExtras.Point2D[],System.Int32@,System.Double@,System.Int32@,System.Double@)">
            <summary>
            Calculates the list of tiles that should be used to render the TilePyramid given the provided view.
            Currently this set is calculated by first selecting a single highest-res LOD that's needed and then
            calculating the concise set of tiles from that LOD that cover the visible region. Tiles from coarser
            regions are not included, but this is easy to infer from the list provided.
            </summary>
            <param name="viewportSize">The size of the viewport in pixels.</param>
            <param name="modelToViewportTransform">The transfrom from highest resolution level of detail to the world.</param>
            <param name="showBackFace">True if the back face of the image should be shown.</param>
            <param name="tiles">Gets the list of visible tiles.</param>
            <param name="visiblePolyAtFinestLod">Gets the visible polygon at the finest level of detail.</param>
            <param name="screenSpacePoly">Gets the visible polygon in the viewport.</param>
            <param name="screenSpacePolyVertexCount">Gets the number of vertices in both visible polys.</param>
            <param name="preciseRenderLod">Gets the level of detail that was selected to render, before rounding to an integral LOD.</param>
            <param name="renderLod">Gets the integral LOD that was selected to render.</param>
            <param name="finestLodNeeded">
                Gets the finest level of detail needed to render the scene accurately. This is frequently greater than the renderLod, 
                because the renderLod is a conservative approximation.
            </param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.IntersectClippedPolyWithTileGrid(System.Collections.Generic.IList{Microsoft.Maps.MapExtras.TileId},Microsoft.Maps.MapExtras.Point2D[],System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Double,System.Double)">
            <summary>
            Calculates the tiles in the specified LOD that intersect the visible 
            region, which is provided as the UVs in clippedVerticesSS.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.CalculateFinestLevelOfDetailToUse(System.Double)">
            <summary>
            Calculates the finest level of detail to use based on the render level of detail.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidDescriptor.CalculateRenderLod(System.Int32,System.Double@,System.Double@)">
            <summary>
            Calculate the level of detail to use when rendering. The approach taken here is to average
            the texel/pixel ratio across all of the line segments of the polygon.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidDescriptor.DefaultClipPoly">
            <summary>
            Provides the default clip poly, which is the equivalent to having no clip.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidDescriptor.ClipPoly">
            <summary>
            The convex polygon that is applied to the TilePyramid in 2D before rendering. It
            is specified in the finest level of detail's coordinatese and defaults to
            Rect(0, 0, finestLodWidth, finestLodHeight).
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidDescriptor.TileWidth">
            <summary>
            The tile width
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidDescriptor.TileHeight">
            <summary>
            The tile height
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidDescriptor.FinestLevelOfDetail">
            <summary>
            The finest level of detail available.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidDescriptor.FinestLevelWidth">
            <summary>
            The width of the finest level of detail in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidDescriptor.FinestLevelHeight">
            <summary>
            The height of the finest level of detail in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramidDescriptor.LevelOfDetailBias">
            <summary>
            The level of detail that is used to render is approximately the one whose visible area in pixels
            most closely matches that of the visible area on screen. This bias value is added to the approximated
            LOD, allowing one to explicity undersample or oversample the output. A positive bias selects a higher LOD,
            therefore oversampling, and a negative one the opposite.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidCoverageMap.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.TilePyramidCoverageMap"/> class.
            </summary>
            <param name="minimumLevelOfDetail">The minimum level of detail.</param>
            <param name="maximumLevelOfDetail">The maximum level of detail.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidCoverageMap.Intialize(System.Int32,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initialize with a new tile grid.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidCoverageMap.MarkAsOccluder(Microsoft.Maps.MapExtras.TileId,System.Boolean)">
            <summary>
            Marks a tile as an occluder.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidCoverageMap.CalculateOcclusions">
            <summary>
            Must be called after initialize and before doing occlusion queries.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramidCoverageMap.IsOccludedByDescendents(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Returns true if the given tile is occluded by its descendents.
            </summary>
            <param name="tileId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.MemoryCache">
            <summary>
            Encapsulates a thread-safe, in-memory cache of objects that are derived
            from <see cref="T:Microsoft.Maps.MapExtras.MemoryCacheValue"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCache.Add(System.Object,Microsoft.Maps.MapExtras.MemoryCacheValue)">
            <summary>
            Adds a new item to the cache. Throws an exception if the key already exists.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCache.GetValue``1(System.Object)">
            <summary>
            Attempts to retrieve an object from the cache. Returns null if no object is found.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCache.Remove(System.Object)">
            <summary>
            Removes an item from the cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCache.Replace(System.Object,Microsoft.Maps.MapExtras.MemoryCacheValue)">
            <summary>
            Replaces the item if it is already in the cache with the new item, otherwise adds it.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MemoryCache.instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCache.Trim">
            <summary>
            Trims the cache to its maximum size.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCache.InternalAdd(System.Object,Microsoft.Maps.MapExtras.MemoryCacheValue)">
            <summary>
            Adds an entry to the cache. Lock must be acquired prior to calling.
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCache.InternalRemove(System.Object)">
            <summary>
            Removes an item from the cache. Lock must be acquired prior to calling.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.MemoryCache.Instance">
            <summary>
            Singleton instance of cache.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.MemoryCache.MaxSize">
            <summary>
            The maximum size of the cache.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.MemoryCache.ObjectsByAge">
            <summary>
            Returns the object in the cache sorted by age, most recently used first, least 
            recently used last.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.PositionOrigin">
            <summary>
            Defines how a UIElement can be positioned by parent MapLayer. This field is used as an anchor position of where to
            anchor a Location on a UIElement when using the MapLayer.MapPosition attached property.
            It is a pair of 2 doubles similar to RenderTransformOrigin. 0,0 is top left, 1,1 is bottom right.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.TopLeft">
            <summary>
            Anchor TopLeft point to MapLayer.Position property. This is the default method.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.TopCenter">
            <summary>
            Anchor TopCenter point to MapLayer.Position property
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.TopRight">
            <summary>
            Anchor TopRight point to MapLayer.Position property
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.CenterLeft">
            <summary>
            Anchor CenterLeft point to MapLayer.Position property
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.Center">
            <summary>
            Anchor Center point to MapLayer.Position property.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.CenterRight">
            <summary>
            Anchor CenterRight point to MapLayer.Position property
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.BottomLeft">
            <summary>
            Anchor BottomLeft point to MapLayer.Position property
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.BottomCenter">
            <summary>
            Anchor BottomCenter point to MapLayer.Position property
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.PositionOrigin.BottomRight">
            <summary>
            Anchor BottomRight point to MapLayer.Position property
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.PositionOrigin.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.PositionOrigin"/> struct.
            </summary>
            <param name="horizontalOrigin">The horizontal origin.</param>
            <param name="verticalOrigin">The vertical origin.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.PositionOrigin.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.PositionOrigin.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.PositionOrigin.Equals(Microsoft.Maps.MapControl.WPF.PositionOrigin)">
            <summary>
            Determines whether the specified origin is equal to this instance.
            </summary>
            <param name="origin">PositionOrigin object</param>
            <returns><c>true</c> if the PositionOrigins are equal.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.PositionOrigin.op_Equality(Microsoft.Maps.MapControl.WPF.PositionOrigin,Microsoft.Maps.MapControl.WPF.PositionOrigin)">
            <summary>
            Equals Operator
            </summary>
            <param name="origin1">Position Origin 1</param>
            <param name="origin2">Position Origin 2</param>
            <returns>returns true if PositionOrigins are equal</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.PositionOrigin.op_Inequality(Microsoft.Maps.MapControl.WPF.PositionOrigin,Microsoft.Maps.MapControl.WPF.PositionOrigin)">
            <summary>
            Not Equals Operator
            </summary>
            <param name="origin1">Position Origin 1</param>
            <param name="origin2">Position Origin 2</param>
            <returns>returns true if PositionOrigins are not equal</returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.PositionOrigin.X">
            <summary>
            Gets or sets the horizontal origin.
            </summary>
            <value>
            The horizontal origin.
            </value>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.PositionOrigin.Y">
            <summary>
            Gets or sets the vertical origin.
            </summary>
            <value>
            The vertical origin.
            </value>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.Session">
            <summary>
            Session class returned by the logging service.
            Used to deserialize the json.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.Session.SessionId">
            <summary>
            Session Id of the current session
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider">
            <summary>
            Crendentials Provider that support a ApplicationId
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.CredentialsProvider">
            <summary>
            Provider that provides credentials used to authenticate the service request.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CredentialsProvider.GetCredentials(System.Action{Microsoft.Maps.MapControl.WPF.Credentials})">
            <summary>
            Gets the credentials used to authenticate the service request.
            </summary>
            <param name="callback">Callback function that is called with the Credentials</param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CredentialsProvider.SessionId">
            <summary>
            The Session Id
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider"/> class with ApplicatedId set to empty string.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider"/> class.
            </summary>
            <param name="applicationId">The application id.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.GetCredentials(System.Action{Microsoft.Maps.MapControl.WPF.Credentials})">
            <summary>
            Gets the credentials used to authenticate the service request.
            </summary>
            <param name="callback">Callback function that is called, with credential set to the given ApplicationId.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.StartSession">
            <summary>
            Called when added to a map, so that all GetCredentials requests will be queued.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.SetSessionId(System.String)">
            <summary>
            Called by the map after it calls the logging service
            </summary>
            <param name="id">The session id.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.EndSession">
            <summary>
            Called by the map when a session end, or unable to obtain a session Id
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.OnPropertyChanged(System.String)">
            <summary>
            Attempt to fire the PropertyChanged event.
            </summary>
            <param name="propertyName">Property that was changed.</param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.ApplicationId">
            <summary>
            Gets or sets the application id.
            </summary>
            <value>
            The application id.
            </value>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.SessionId">
            <summary>
            The session Id
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.ApplicationIdCredentialsProvider.PropertyChanged">
            <summary>
            Event raised when a property changes.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Pushpin">
            <summary>
            Pushpin class
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Pushpin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Pushpin"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Pushpin.LocationDependencyProperty">
            <summary>
            Location Dependency Property
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Pushpin.PositionOriginDependencyProperty">
            <summary>
            Position Origin Dependency Property
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Pushpin.HeadingProperty">
            <summary>
            Heading Dependency Property
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Pushpin.UpdateRenderTransform">
            <summary>
            Updates the control's render transform to reflect the PositionOrigin and Heading. If heading is never
            set to a value other than 0, then the render transform is never set and may be adjusted without conflict 
            by the consumer of the control. However, if heading is set to a value other than 0 and a custom render 
            transform is desired, this method should be overridden.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Pushpin.OnLocationChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method on object when Location is changed. 
            </summary>
            <param name="d">dependency object</param>
            <param name="eventArgs">event args</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Pushpin.OnPositionOriginChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method on object when PositionOrigin is changed. 
            </summary>
            <param name="d">dependency object</param>
            <param name="eventArgs">event args</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Pushpin.OnHeadingChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method on object when Origin is changed.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="eventArgs">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Pushpin.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Pushpin.Location">
            <summary>
            Gets or sets the location for the pushpin.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Pushpin.PositionOrigin">
            <summary>
            Gets or sets the position origin for the pushpin.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Pushpin.Heading">
            <summary>
            Gets or sets the heading property, measured in degrees.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.Copyright">
            <summary>
            Interaction logic for Copyright.xaml
            </summary>
            <summary>
            Copyright
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Copyright.NonBreakingSpace">
            <summary>
            Value A0 in hex (160 decimal) is non breaking unicode space. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Overlays.Copyright.attributions">
            <summary>
            Collection of attributions.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Copyright.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.Overlays.Copyright"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Copyright.Attributions_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the Attributions control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Copyright.OnAttributionsChanged(System.Collections.IList,System.Collections.IList)">
            <summary>
            Called when [attributions changed].
            </summary>
            <param name="oldItems">The old items.</param>
            <param name="newItems">The new items.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Copyright.NonBreakingString(System.String)">
            <summary>
            Replace spaces with nonbreaking spaces to avoid breaking in the middle of a
            single string.
            </summary>
            <param name="s">The string</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.Copyright.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.Copyright.Attributions">
            <summary>
            Gets or sets the collection of Attributes
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.CoreResourcesHelper">
            <summary>
            Helper class for Core string resources.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CoreResourcesHelper.CreateResource">
            <summary>
            Creates an instance of the resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CoreResourcesHelper.SetResourceCulture(Microsoft.Maps.MapControl.WPF.Core.CoreResources,System.Globalization.CultureInfo)">
            <summary>
            Sets the resource culture.
            </summary>
            <param name="resource">Resource instance.</param>
            <param name="culture">Culture.</param>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.RoadMode">
            <summary>
            Map mode that displays road imagery.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.RoadMode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.RoadMode"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.RoadMode.AsynchronousConfigurationLoaded(Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection,System.Object)">
            <summary>
            Callback when configuration loads
            </summary>
            <param name="config"></param>
            <param name="userState"></param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.RoadMode.TileUriFormat">
            <summary>
            Gets the tile URI format.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.RoadMode.Subdomains">
            <summary>
            Gets the subdomains.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.RoadMode.ModeBackground">
            <summary>
            Tells whether or not the mode typically has a light or a dark background to choose
            coloring for overlay.  Nost of the modes have dark backgrounds so make it the default.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.RoadMode.MapStyle">
            <summary>
            Gets PlatformServices map style.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.FeetSingular">
            <summary>
              Looks up a localized string similar to {0} foot.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.FeetPlural">
            <summary>
              Looks up a localized string similar to {0} feet.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.InvalidCredentialsErrorMessage">
            <summary>
              Looks up a localized string similar to Invalid Credentials. Sign up for a developer account at: http://www.microsoft.com/maps/developers.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.KilometersSingular">
            <summary>
              Looks up a localized string similar to {0} kilometer.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.KilometersPlural">
            <summary>
              Looks up a localized string similar to {0} kilometers.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.LoadingConfigurationErrorMessage">
            <summary>
              Looks up a localized string similar to Unable to contact Server. Please try again later..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.LoadingUriSchemeErrorMessage">
            <summary>
              Looks up a localized string similar to Map loaded in unsupported Uri Scheme. Please reload page in &quot;http&quot; scheme..
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.MetersSingular">
            <summary>
              Looks up a localized string similar to {0} meter.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.MetersPlural">
            <summary>
              Looks up a localized string similar to {0} meters.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.MilesSingular">
            <summary>
              Looks up a localized string similar to {0} mile.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.MilesPlural">
            <summary>
              Looks up a localized string similar to {0} miles.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.YardsSingular">
            <summary>
              Looks up a localized string similar to {0} yards.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources.YardsPlural">
            <summary>
              Looks up a localized string similar to {0} yards.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.Plane3D">
            <summary>
            Representation of a plane in 3D space described as (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Plane3D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.Plane3D"/> struct.
            </summary>
            <param name="a">The a coefficient.</param>
            <param name="b">The b coefficient.</param>
            <param name="c">The c coefficient.</param>
            <param name="d">The d coefficient.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Plane3D.#ctor(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.Plane3D"/> class given 3 points on the plane. 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Plane3D.#ctor(Microsoft.Maps.MapExtras.Point3D,Microsoft.Maps.MapExtras.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.Plane3D"/> class given a point on the plane and a normal. 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Plane3D.op_Equality(Microsoft.Maps.MapExtras.Plane3D,Microsoft.Maps.MapExtras.Plane3D)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Plane3D.op_Inequality(Microsoft.Maps.MapExtras.Plane3D,Microsoft.Maps.MapExtras.Plane3D)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Plane3D.Equals(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Plane3D.GetHashCode">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.Plane3D.ToString">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.Plane3D.A">
            <summary>
            A, of the Plane Equation (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.Plane3D.B">
            <summary>
            B, of the Plane Equation (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.Plane3D.C">
            <summary>
            C, of the Plane Equation (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.Plane3D.D">
            <summary>
            D, of the Plane Equation (Ax + By + Cz = D)
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.CoordinateSystemDirection">
            <summary>
            Differentiates between left handed and right handed coordinate systems.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.CoordinateSystemDirection.LeftHanded">
            <summary>
            Left handed coordinate system
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.CoordinateSystemDirection.RightHanded">
            <summary>
            Right handed coodinate system
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TileWrap">
            <summary>
            How tiles are wrapped
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TileWrap.None">
            <summary>
            No wrapping
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TileWrap.Horizontal">
            <summary>
            Tiles are wrapped horizontally
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TileWrap.Vertical">
            <summary>
            Tiles are wrapped vertically
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TileWrap.Both">
            <summary>
            Tiles are wrapped both horizontally and vertically
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TileEdgeFlags">
            <summary>
            Describes whether or not a tile is at the edge of its particular level of detail.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TileEdgeFlags.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.TileEdgeFlags"/> struct.
            </summary>
            <param name="isLeftEdge">if set to <c>true</c> [is left edge].</param>
            <param name="isRightEdge">if set to <c>true</c> [is right edge].</param>
            <param name="isTopEdge">if set to <c>true</c> [is top edge].</param>
            <param name="isBottomEdge">if set to <c>true</c> [is bottom edge].</param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileEdgeFlags.IsLeftEdge">
            <summary>
            True if the tile lies on the left edge of the pyramid.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileEdgeFlags.IsRightEdge">
            <summary>
            True if the tile lies on the right edge of the pyramid.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileEdgeFlags.IsTopEdge">
            <summary>
            True if the tile lies on the top edge of the pyramid.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileEdgeFlags.IsBottomEdge">
            <summary>
            True if the tile lies on the bottom edge of the pyramid.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.RelevantTileSet">
            <summary>
            Tracks the set of tiles that are currently relevant to rendering the scene.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RelevantTileSet.SetRelevantTiles(System.Collections.Generic.IList{System.Tuple{Microsoft.Maps.MapExtras.TileId,System.Nullable{System.Int32}}})">
            <summary>
            Sets the list of all tiles that are currently relevant to rendering the scene.
            </summary>
            <param name="relevantTilesList">The list of relevant tiles. The int specifies the priority of the tile, where 
            higher values should be downloaded before lower values. A value of null indicates that the tile should not
            be downloaded, but it should be considered relevant.
            </param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.RelevantTileSet.Contains(Microsoft.Maps.MapExtras.TileId)">
            <summary>
            Returns true if the given tile id is relevant according to the last call to SetRelevantTiles.
            </summary>
            <param name="tileId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RelevantTileSet.RelevantTiles">
            <summary>
            Returns the list of relevant tiles that was passed in to the last call to SetRelevantTiles. This list 
            is sorted from highest priority to lowest priority (null values at end).
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.RelevantTileSet.RemovedTiles">
            <summary>
            Returns the list of tiles that were present in the previous call to to SetRelevantTiles but not
            in the last call.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Design.LocationCollectionConverter">
            <summary>
            Parses a string into collection of Locations
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.LocationCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Let caller know that we can convert from string
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Design.LocationCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert string to LocationCollection. String must be formatted as "lat,lon lat,lon" .. i.e. "1,2 3,4" etc.
            or with altitude specified is "lat,lon,alt lat,lon,alt"  ..i.e. "1,2,3 4,5,6"
            TODO: Fix "1, 2 3,4" will not work due to white space after comma. 
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.ImageCallback">
            <summary>
            Callback to supply tile images directly from a tile source
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="zoomLevel"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.TileSource">
            <summary>
            Simple TileSource for retreiving URI for a tile based on it's zoomlevel and tile position.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.TileSource.QuadKeyUriFragment">
            <summary>
            string in the UriFormat that will be replaced with the quadkey
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.TileSource.UriSchemeUriFragment">
            <summary>
            string in the UriFormat that will be replaced with the UriScheme
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.TileSource.UriCulture">
            <summary>
            string in the UriFormat that will be replaced with the culture
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.TileSource.UriRegion">
            <summary>
            string in the UriFormat that will be replaced with the Region
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.TileSource.UriVersion">
            <summary>
            string in the UriFormat that will be replaced with the version
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.TileSource.UriKey">
            <summary>
            string in the UriFormat that will be replaced with the Key
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.TileSource.SubdomainUriFragment">
            <summary>
            string in the UriFormat that will be replaced with the subdomain
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.TileSource.UriRegionLoc">
            <summary>
            string in the UriFormat that will be replaced with the Key
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.TileSource.#ctor">
            <summary>
            Creates an instance of TileSource.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.TileSource.#ctor(System.String)">
            <summary>
            Creates an instance of TileSource with a given uriFormat.
            </summary>
            <param name="uriFormat">UriFormat used to create the Uri.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.TileSource.GetUri(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Uri of a given tile
            </summary>
            <param name="x">X coordinate of the tile.</param>
            <param name="y">Y coordinate of the tile.</param>
            <param name="zoomLevel">Zoom level of the tile.</param>
            <returns>A Uri of the given tile</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.TileSource.GetSubdomain(Microsoft.Maps.MapControl.WPF.Core.QuadKey)">
            <summary>
            Get the subdomain for the given quadkey.
            Default implementation, returns a 0-7
            </summary>
            <param name="quadKey">Quadkey to calculate the subdomain of.</param>
            <returns>String representing the subdomain</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.TileSource.SetSubdomains(System.String[][])">
            <summary>
            Set a matrix representing the subdomains.
            Set to null to return empty string.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.TileSource.GetImage(System.Int64,System.Int64,System.Int32)">
            <summary>
            Override this method to directly return an image for a TileId
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="zoomLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.TileSource.ReplaceString(System.String,System.String,System.String)">
            <summary>
            Does a case-insenstive replacement.
            Not efficient method. Do not call often.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.TileSource.OnPropertyChanged(System.String)">
            <summary>
            Attempt to fire the PropertyChanged event.
            </summary>
            <param name="propertyName">Property that was changed.</param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.TileSource.UriFormat">
            <summary>
            Gets or Sets the UriFormat of this TileSource.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.TileSource.Visibility">
            <summary>
            Gets or Sets the Visiblity of this TileSource. TileSource that are not Visible do not get rendered.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.TileSource.SuppliesImagesDirectly">
            <summary>
            Override to return true if the tile source will supply images directly instead of via a URL
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.TileSource.DirectImage">
            <summary>
            Delegate to supply images
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.TileSource.PropertyChanged">
            <summary>
            Event raised when a property of the TileSource changes.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection">
            <summary>
            A Collection of configuration settings
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates an instance of MapConfigurationSectionCollection.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection.Contains(System.String)">
            <summary>
            Gets whether the configuration contains the given key.
            </summary>
            <param name="key">A string representing the key of the configuration item.</param>
            <returns>True if the configuration contains the given key, and false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection.Item(System.String)">
            <summary>
            Gets a configuration item with the corresponding key, or string. Empty string if the key does not exists.
            </summary>
            <param name="key">A string representing the key of the configuration item.</param>
            <returns>The configuration string of the given key.</returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.CoreResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CoreResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CoreResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CoreResources.DefaultCopyright">
            <summary>
              Looks up a localized string similar to © {0} Microsoft Corporation.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.CopyrightResult">
            <summary>
            CopyrightManager's RequestCopyrightString result.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightResult.#ctor(System.Collections.Generic.IList{System.String},System.String,Microsoft.Maps.MapControl.WPF.LocationRect,System.Double)">
            <summary>
            Creates an instance of CopyrightResult
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightResult.CopyrightStrings">
            <summary>
            List of copyright strings
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightResult.Culture">
            <summary>
            Culture used to make request.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightResult.BoundingRectangle">
            <summary>
            Bounds of the map view used to make request
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightResult.ZoomLevel">
            <summary>
            ZoomLevel used to make request
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.CopyrightRequestState">
            <summary>
            State object used when making asynchronous calls to fetch copyright data from the server.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.CopyrightRequestState.#ctor(System.String,Microsoft.Maps.MapControl.WPF.PlatformServices.MapStyle,Microsoft.Maps.MapControl.WPF.LocationRect,System.Double,Microsoft.Maps.MapControl.WPF.Credentials,System.Action{Microsoft.Maps.MapControl.WPF.Core.CopyrightResult})">
            <summary>
            Constructor that sets the properties for the request.  Include token and app id.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightRequestState.Culture">
            <summary>
            Culture when the request was initiated.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightRequestState.Style">
            <summary>
            MapStyle requested
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightRequestState.BoundingRectangle">
            <summary>
            Bounds of the map view when the request was initiated.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightRequestState.ZoomLevel">
            <summary>
            ZoomLevel when the request was initiated.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightRequestState.Credentials">
            <summary>
            Credentials used for the fetch.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.CopyrightRequestState.CopyrightCallback">
            <summary>
            Callback where the data is needed.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Map">
            <summary>
            The map control.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._weakMapCredentials">
            <summary>
            Weak event listener for credentials provider callback
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map.loadingErrorMessage">
            <summary>
            Shows error messages
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map.logServiceUriFormat">
            <summary>
            Log Service URI Format. This gets set by configuration if logging is configured
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._MapForeground">
            <summary>
            The map foreground control, which contains scale, copyright, etc.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._LeftButtonDownNormalizedMercatorPoint">
            <summary>
            The point in normalized mercator space where the mouse was clicked. Null
            if the left button is not currently down.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._LeftButtonDownViewportPoint">
            <summary>
            The pixel in the viewport where the mouse was clicked.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._useInertia">
            <summary>
            If false, then any inertial deltas are ignored.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._ManipulationProcessor">
            <summary>
            Used to handle manipulations on the map. Using this rather than the standard manipulation events for finer control
            when the map is used within a container like a ScatterViewItem.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._InertiaProcessor">
            <summary>
            Used to handle inertia.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map.storedManipulation">
            <summary>
            storage for small input
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._InertiaTimer">
            <summary>
            Used to update inertia.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._useHttps">
            <summary>
            Flag whether or not to use HTTPS when making network requests for all Map instances. Default is false.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._doubleTapDelay">
            <summary>
            Max delay in milliseconds between two taps for a double tap to fire
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._doubleTapThreshold">
            <summary>
            Max difference in pixels between 2 tap locations for a double tap to fire
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._touchTapPointPrevious">
            <summary>
            Previous tap location
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._touchTapTimePrevious">
            <summary>
            Time of previous tap 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._touchTapPointCurrent">
            <summary>
            Current tap location
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._touchTapTimeCurrent">
            <summary>
            Time of current tap
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._lastTouchTick">
            <summary>
            Last touch move event
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._touchCount">
            <summary>
            Count of currently active touches
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._velocity">
            <summary>
            Velocity of mouse move
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._previousMousePoint">
            <summary>
            Position of last mouse pointer
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._lastMouseMoveTime">
            <summary>
            Time of last mouse move
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._logTimer">
            <summary>
            Timer used to delay the logging call
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map.version">
            <summary>
            Version of Map Control assembly
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.GetVersion">
            <summary>
            Returns assembly version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.#cctor">
            <summary>
            Initializes static members of the Map class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.#ctor">
            <summary>
            Initializes a new instance of the Map class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.Dispose(System.Boolean)">
            <summary>
            Dispose override
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map._SupportedManipulations">
            <summary>
            Backing store for SupportedManipulations.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick"/> routed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnTouchDown(System.Windows.Input.TouchEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.UIElement.TouchDown"/> routed event that occurs when a touch presses inside this element.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnTouchMove(System.Windows.Input.TouchEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.UIElement.TouchMove"/> routed event that occurs when a touch moves while inside this element.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnTouchUp(System.Windows.Input.TouchEventArgs)">
            <summary>
            Provides class handling for the <see cref="E:System.Windows.UIElement.TouchUp"/> routed event that occurs when a touch is released inside this element.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.TouchEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.UpdateVelocity(System.Windows.Point)">
            <summary>
            Update the velocity of mouse inertia
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.ManipulationProcessor_Started(System.Object,System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs)">
            <summary>
            Perform some initialization when a manipulation begins.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.ManipulationProcessor_Delta(System.Object,System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs)">
            <summary>
            Updates the map position, zoom, and heading during a manipulation.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.ProcessStoredManipulation">
            <summary>
            Deals with any stored manipulation
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.ManipulationProcessor_Completed(System.Object,System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs)">
            <summary>
            When a manipulation completes, set up the inertia processor.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map._cancelDoubleTap">
            <summary>
            Prevent double tap from occuring during current tap.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.ProcessManipulators">
            <summary>
            Update the manipulation.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.StopInertia">
            <summary>
            Stops the inertia.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.ZoomAboutViewportPoint(System.Double,System.Windows.Point)">
            <summary>
            Zooms about a viewport point.
            </summary>
            <param name="zoomLevelIncrement">The zoom level increment.</param>
            <param name="zoomTargetInViewport">The zoom target in viewport.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnApplyTemplate">
            <summary>
            OnApplyTemplate override
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnFirstFrame">
            <summary>
            method called on First Frame
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnCredentialsProviderChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback method on object when Credentials is changed. 
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.AsynchronousConfigurationLoaded(Microsoft.Maps.MapControl.WPF.Core.MapConfigurationSection,System.Object)">
            <summary>
            Callback from the AsynchronousConfiguration.
            Checks to see if it's loading properly, and throw the ErrorLoading Event if it didn't.
            </summary>
            <param name="config"></param>
            <param name="userState"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.Log(System.Boolean)">
            <summary>
            Does a log if all requirements are met.
            </summary>
            <param name="hasCredentialsProviderChanged">Whether the credentialsProvider has changed, or another requirement is met.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.Log(System.String)">
            <summary>
            Only to be called from Log(bool hasCredentialsProviderChanged)
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.Log(System.String,Microsoft.Maps.MapControl.WPF.Core.CredentialsProvider,Microsoft.Maps.MapControl.WPF.Credentials)">
            <summary>
            Log data to the logging service and authenticate credentials
            This method will only log if the loggingServiceUriFormat and session ID are set
            </summary>
            <param name="entry">entry point value for this logging event</param>
            <param name="credentialsProvider">CredentialsProvider used to generate the credentials</param>
            <param name="credentials">Credentials to log</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.LogResponse(System.Object,System.Net.DownloadStringCompletedEventArgs)">
            <summary>
            Response to Log request which authenticates credentials
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnCredentialsError">
            <summary>
            Called when there is a an error validating credentials
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.OnCredentialsValid">
            <summary>
            Called when credentials are valid
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.Credentials_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when property is changed on certain CredentialsProviders to detect credentials changes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.ShowLoadingError(System.Exception)">
            <summary>
            Event from the map when it has a loading error
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.StartSession(Microsoft.Maps.MapControl.WPF.Core.CredentialsProvider)">
            <summary>
            Helper method to start a session on an ApplicationIdCredentialsProvider
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.EndSession(Microsoft.Maps.MapControl.WPF.Core.CredentialsProvider)">
            <summary>
            Helper method to end a session on an ApplicationIdCredentialsProvider
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.loadingErrorEvent">
            <summary>
            Variables that keep track of whether a loading error has occurred.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.UseHttps">
            <summary>
            Property whether or not to use HTTPS when making network requests for all Map instances. Default is false.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.UriScheme">
            <summary>
            Property to return the current Uri Scheme for the Map uses when making network requests
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.LoggingDelay">
            <summary>
            Delay in milliseconds before calling the logging service
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.MouseLeftButtonDown">
            <summary>
            Occurs when the left mouse button is pressed while the mouse pointer is over the map. 
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.MouseLeftButtonUp">
            <summary>
            Occurs when the left mouse button is released while the mouse is over the map, or if mouse is captured
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.MouseDoubleClick">
            <summary>
            User double clicked at given point on the map
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.MouseMove">
            <summary>
            Occurs when the coordinate position of the mouse (or stylus) changes while the mouse pointer is over the map.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.MouseWheel">
            <summary>
            User move the mouse wheel, while mouse is at given point
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.KeyDown">
            <summary>
            Occurs when a keyboard key is pressed when the map has focus. 
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.TouchUp">
            <summary>
            Occurs on touch up
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.TouchDown">
            <summary>
            Occurs on touch down
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.TouchMove">
            <summary>
            Occurs on touch move
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.MapForegroundStyle">
            <summary>
            Gets or sets the map foreground style.
            </summary>
            <value>
            The map foreground style.
            </value>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Map.LoadingError">
            <summary>
            Triggered when Map encounters an error loading.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.SupportedManipulations">
            <summary>
            Gets or sets the supported manipulations.
            </summary>
            <value>The supported manipulations.</value>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.UseInertia">
            <summary>
            Use Inertia. When true, inertia animation effect is on
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.IsInDesignMode">
            <summary>
            Is In design mode?
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Map.LogEntry">
            <summary>
            Identify logging entry types
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map.LogEntry.StartSession">
            <summary>
            Start Session
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.Map.LogEntry.ChangeCredentials">
            <summary>
            Credentials Change
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.StoredManipulationDelta2D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.StoredManipulationDelta2D.Accumulate(System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs)">
            <summary>
            Adds in delta for the current process
            </summary>
            <param name="additional"></param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.StoredManipulationDelta2D.Reset">
            <summary>
            Resets any accumulated values
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Map.StoredManipulationDelta2D.HasValuesStored">
            <summary>
            True if the class has stored values
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.StoredManipulationDelta2D.OriginX">
            <summary>
            Origin of the manipulation action
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Map.StoredManipulationDelta2D.OriginY">
            <summary>
            Origin of the manipulation action
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator">
            <summary>
            Controls the maps zoom and pan values as we enter a synth
            NOTE: Coding guilelines for names are not followed so that variables match the paper which
            explains the algorithm: http://www.win.tue.nl/~vanwijk/zoompan.pdf, intial code take from Lutz's
            blog and modified slightly for our scenario: http://blogs.msdn.com/lutzg/archive/2009/03/03/panning-across-large-maps-with-deep-zoom-and-custom-animations.aspx
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.VelocitySpline">
            <summary>
            Converts linear values from 0..1 representing the fraction of the total time elapsed
            into values from 0..1 that represent progress along the path. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.c0">
            <summary>
            c0 and c1 are the positions of the center of the viewport at the beginning and end of the animation, respectively.
            direction = c1 - c0. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.c1">
            <summary>
            c0 and c1 are the positions of the center of the viewport at the beginning and end of the animation, respectively.
            direction = c1 - c0. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.direction">
            <summary>
            c0 and c1 are the positions of the center of the viewport at the beginning and end of the animation, respectively.
            direction = c1 - c0. 
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.w0">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.w1">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.u0">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.u1">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.b0">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.b1">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.r0">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.r1">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.S">
            <summary>
            w is the width of the viewport.
            u is the distance the center of the viewport has traveled.
            b and r are constants used in the paper's equations.
            S is the perceptual distance traveled in units of (size of viewport), including the effects of zooming.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.Begin(System.Windows.Rect,System.Windows.Rect,System.Double@)">
            <summary>
            Begins the animation.
            </summary>
            <param name="fromRect">The rect to animate from.</param>
            <param name="toRect">The rect to animate to.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.Tick(System.Double,System.Double@,System.Windows.Point@)">
            <summary>
            Ticks the animation.
            </summary>
            <param name="fractionComplete">The fraction of tha animation that's complete.</param>
            <param name="width">The width at the tick.</param>
            <param name="center">The center at the tick.</param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.Rho">
            <summary>
            Gets or sets Rho, which controls the amount of zooming used.  sqrt(2) is an empirically determined value suggested in the paper.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.ZoomAndPanAnimator.AverageVelocity">
            <summary>
            Gets or sets the average speed of motion in units of (size of viewport)/second. 
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapPolygon">
            <summary>
            A polygon that can arrange itself on the map
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MapPolygon"/> class. 
            Let the base class know that we are working with a Polygon shape
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapPolygon.ProjectedPoints">
            <summary>
            Proxy this points to Polygon.Points
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.MapPolygon.FillRule">
            <summary>
            Gets or sets the polygon's fill rull.
            </summary>
            <value>
            The fill rule.
            </value>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResourcesHelper">
            <summary>
            Helper class for Overlay string resources.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResourcesHelper.CreateResource">
            <summary>
            Creates an instance of the resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.OverlayResourcesHelper.SetResourceCulture(Microsoft.Maps.MapControl.WPF.Overlays.OverlayResources,System.Globalization.CultureInfo)">
            <summary>
            Sets the resource culture.
            </summary>
            <param name="resource">Resource instance.</param>
            <param name="culture">Culture.</param>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.MemoryCacheItem`1">
            <summary>
            Generic cache entry that contains an item and a size.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.MemoryCacheValue">
            <summary>
            Cacheable object.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCacheValue.OnSizeChanged(System.Int32)">
            <summary>
            Called when the Size property changes.
            </summary>
            <param name="previousSize"></param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.MemoryCacheValue.Size">
            <summary>
            Size in bytes of this item.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MemoryCacheItem`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.MemoryCacheItem`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="size">The size of the item.</param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.MemoryCacheItem`1.Item">
            <summary>
            The item this cache item contains.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.MemoryCacheItem`1.Size">
            <summary>
            The size in bytes of this cache item.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.MapMath">
            <summary>
            Map based math operations.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MapMath.DefaultTileSize">
            <summary>
            Default tile size
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MapMath.NorthUpHeading">
            <summary>
            North up
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MapMath.EastUpHeading">
            <summary>
            East up
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MapMath.SouthUpHeading">
            <summary>
            South Up
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MapMath.WestUpHeading">
            <summary>
            West Up
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.MapMath.EnhancedBirdseyePitch">
            <summary>
            The pitch used by all enhanced bird's eye projection (EnhancedBirdseyePitch)
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MapMath.LocationRectToMercatorZoomLevel(System.Windows.Size,Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Converts a locationrect into a zoomlevel assuming a mercator projection.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MapMath.CalculateViewFromLocations(System.Collections.Generic.IEnumerable{Microsoft.Maps.MapControl.WPF.Location},System.Windows.Size,System.Double,System.Windows.Thickness,System.Windows.Point@,System.Double@)">
            <summary>
            Determines the normalized mercator center and zoom level for the the view that contains the given locations.
            </summary>
            <param name="locations">The locations.</param>
            <param name="viewportSize">Size of the viewport in pixels.</param>
            <param name="heading">The map heading.</param>
            <param name="margin">The margin, in viewport pixels.</param>
            <param name="centerNormalizedMercator">The normalized mercator point that is at the center of the map.</param>
            <param name="zoomLevel">The zoom level.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MapMath.GetMercatorCenter(Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Gets the center for given location rect given mercator projection. This is NOT the same as LocationRect.Center.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MapMath.MercatorZoomLevelToScale(System.Double,System.Double)">
            <summary>
            Converts mercator ZoomLevel to scale (meters per pixel)
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MapMath.ScaleToMercatorZoomLevel(System.Double,System.Double)">
            <summary>
            Converts scale (meters per pixel) to mercator ZoomLevel
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MapMath.NormalizeLocation(Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Normalizes the location to have proper Lat (-90 to 90) and Lon (-180 to 180)
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MapMath.NormalizeLocationRect(Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Normalizes a location rectangle to have bounded center, and clamped width/heigth.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.MapMath.SnapToCardinalHeading(System.Double)">
            <summary>
            Snaps to a cardinal heading (NorthUp,EastUp,WestUp or SouthUp)
            </summary>
            <param name="heading"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationGetSectionRequest">
            <summary>
            Stores GetSection requests
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationCallback">
            <summary>
            MapConfiguration's GetSection Callback
            </summary>
            <param name="config"></param>
            <param name="userState"></param>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationLoadedEventArgs">
            <summary>
            Providers error data when MapConfiguration fails to load.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationLoadedEventArgs.#ctor(System.Exception)">
            <summary>
            Creates an instance of MapConfigurationLoadedEventArgs.
            </summary>
            <param name="error">Error when loading Configuration.</param>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.MapConfigurationLoadedEventArgs.Error">
            <summary>
            Gets the error thrown when loading the configuration.
            Null if loaded successfully.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.MapConfiguration">
            <summary>
            Static Class containing asynchronous configuration settings.
            Configuration is loaded when an Event handler is added to AsynchronousConfigurationLoaded.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfiguration.GetSection(System.String,System.String,System.String,System.String,Microsoft.Maps.MapControl.WPF.Core.MapConfigurationCallback,System.Boolean)">
            <summary>
            Load the configuration.
            If configuration is already loaded, it will call the callback function without trying to load the configuration.
            </summary>
            <param name="version">Version string of the configuration</param>
            <param name="sectionName">Section Name of the configuration</param>
            /// <param name="culture">Culture of the configuration</param>
            <param name="key">The session key</param>
            <param name="callback">Callback function to call after the configuration is loaded</param>
            <param name="reExecuteCallback">Whether the callback can be re-run when new config data is loaded</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfiguration.GetSection(System.String,System.String,System.String,System.String,Microsoft.Maps.MapControl.WPF.Core.MapConfigurationCallback,System.Boolean,System.Object)">
            <summary>
            Load the configuration.
            If configuration is already loaded, it will call the callback function without trying to load the configuration.
            </summary>
            <param name="version">Version string of the configuration</param>
            <param name="sectionName">Section Name of the configuration</param>
            <param name="culture">Culture of the configuration</param>
            <param name="key">The session key</param>
            <param name="callback">Callback function to call after the configuration is loaded</param>
            <param name="reExecuteCallback">Whether the callback can be re-run when new config data is loaded</param>
            <param name="userState">An object that store user defined information. Is returned in the callback function.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.MapConfiguration.Reset">
            <summary>
            Internal method for testing.
            Resets the configuration to it's initial state.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.Core.MapConfiguration.Loaded">
            <summary>
            Event thrown when configuration is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.Core.MapConfiguration.IsInDesignMode">
            <summary>
            Is In design mode?
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorResourcesHelper">
            <summary>
            Helper class for Overlay string resources.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorResourcesHelper.CreateResource">
            <summary>
            Creates an instance of the resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorResourcesHelper.SetResourceCulture(Microsoft.Maps.MapControl.WPF.Overlays.LoadingErrorStrings,System.Globalization.CultureInfo)">
            <summary>
            Sets the resource culture.
            </summary>
            <param name="resource">Resource instance.</param>
            <param name="culture">Culture.</param>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.LevelOfDetailSettings">
            <summary>
            Describes user-spcecified settings for a level of detail in the tile pyramid.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.LevelOfDetailSettings.#ctor(System.Boolean,System.Double,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.LevelOfDetailSettings"/> struct.
            </summary>
            <param name="visible">if set to <c>true</c> [visible].</param>
            <param name="targetOpacity">The target opacity.</param>
            <param name="downloadPriority">The download priority.</param>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.LevelOfDetailSettings.Visible">
            <summary>
            Specifies whether the level of detail should be visible. One may want to download the level of detail,
            but not show it and vice versa.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.LevelOfDetailSettings.TargetOpacity">
            <summary>
            The target opacity.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.LevelOfDetailSettings.DownloadPriority">
            <summary>
            The priority with which the level of detail will be downloaded, where the larger the priority, the
            sooner it will be downloaded. A null value indicates that the LOD will not be downloaded at all.
            The actual tile priorities that are emitted for a particular level of detail are the level of detail's
            priority + N, where N is the rank of the tile in the intra-LOD priority sort.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.TileStatus">
            <summary>
            Provides the status of a tile in the tile pyramid.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileStatus.TileId">
            <summary>
            The id of the tile
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileStatus.Visible">
            <summary>
            True if the tile is visible. The tile may be marked visible even if it's not available.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileStatus.Available">
            <summary>
            True if the tile is present, i.e. we have a tile renderable for it.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileStatus.WillNeverBeAvailable">
            <summary>
            True if the tile will never be available, as indicated by the tile source.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TileStatus.FullyOpaque">
            <summary>
            True if the tile is fully opaque, i.e. completely faded in.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapExtras.ChooseLevelOfDetailSettings">
            <summary>
            A delegate that chooses the settings for a particular level of detail based as a function of the level 
            of detail that's being rendered. If null, the LOD is ignored entirely.
            </summary>
            <param name="renderLevelOfDetail"></param>
            <param name="levelOfDetail"></param>
            <param name="minimumLevelOfDetail"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Maps.MapExtras.TilePyramid.levelOfDetailSettings">
            <summary>
            A list of the level of details settings that is indexed by level of detail and is updated
            every time the pyramid is rendered.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramid.#ctor(Microsoft.Maps.MapExtras.TilePyramidDescriptor,Microsoft.Maps.MapExtras.TileSource,System.Windows.Controls.Canvas)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapExtras.TilePyramid"/> class.
            </summary>
            <param name="tilePyramidDescriptor">The tile pyramid descriptor.</param>
            <param name="tileSource">The tile source.</param>
            <param name="parentCanvas">The parent canvas.</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramid.DownloadFinestNLevelsOfDetailNeeded(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a delegate for calculating level of detail priorities as:
            <code>
                min LOD            : -5 (null if !downloadTheRest)
                min LOD + 1        : -10 (null if !downloadTheRest)
                min LOD + 2        : -15 (null if !downloadTheRest)
                ...
                render LOD - N - 1 : (N - 1) * 5
                ...
                render LOD - 1     : 5
                render LOD         : 0
            </code>
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramid.Render(Microsoft.Maps.MapExtras.Point2D,System.Windows.Media.Media3D.Matrix3D@,System.Collections.Generic.IList{Microsoft.Maps.MapExtras.TileId},Microsoft.Maps.MapExtras.TilePriorityCalculator,System.Double,System.Int32,System.Boolean)">
            <summary>
            Render the tile pyramid.
            </summary>
            <param name="viewportSize"></param>
            <param name="tilePyramidToViewport"></param>
            <param name="visibleTiles"></param>
            <param name="tilePriorityCalculator"></param>
            <param name="preciseRenderLod">Gets the level of detail that was selected to render, before rounding to an integral LOD.</param>
            <param name="renderLod">Gets the integral LOD that was selected to render.</param>
            <param name="showBackgroundTiles">specifies whether to show background tiles (ancestors from higher in the pyramid) when rendering the tile layer</param>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramid.GetTiles">
            <summary>
            Returns a list of all statuses for all tiles possesed by the tile pyramid.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramid.ClearAllTiles">
            <summary>
            Clears all tiles and cancels any pending downloads. This is equivalent to doing a render where the tile
            pyramid is not visible.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapExtras.TilePyramid.DetachTileSource">
            <summary>
            Detaches the tile source, clears all tiles, and cancels any pending downloads. The tile pyramid may 
            not be used after this operation.        
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramid.TilePyramidDescriptor">
            <summary>
            The tiled pyramid descriptor
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramid.TileSource">
            <summary>
            The tile source
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramid.ExplicitRelevantTiles">
            <summary>
            A list of tiles that are explicitly indicated as being relevant regardless of whether they are
            actually relevant to the view. The int specifies the priority of the tile, where 
            higher values should be downloaded before lower values. A value of null indicates that the tile should not
            be downloaded, but it should be considered relevant. If a tile is in this list and is actually relevant
            to the view, then the higher of the two priorities will be reported.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramid.ChooseLevelOfDetailSettings">
            <summary>
            A delegate that chooses the settings for a particular level of detail based on the level of detail
            that's being rendered.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapExtras.TilePyramid.NeedsRender">
            <summary>
            Fired when the tile pyramid needs to be rendered, such as when new tiles have become available.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramid.Opacity">
            <summary>
            The opacity of the tile pyramid.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramid.TileOverlap">
            <summary>
            Specifies the amount by which the tiles overlap. The valid range is [0,1] and
            the default value is 0.5. Depending on the scenario, the overlap may be varied
            to reduce seams. It can be varied as a function of opacity, the degree of 
            oversampling, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramid.OverlapPyramidEdges">
            <summary>
            If true, then overlap borders will be used on the edges of tiles that sit at the
            edge of the tile pyramid. Defaults to false. This should be used when two tile
            pyramids are to be placed adjacent to eachother, such as with a cube map, in order
            to avoid seams.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapExtras.TilePyramid.AllowHardwareAcceleration">
            <summary>
            True if HW acceleration may be used. HW acceleration is only used if it's actually available. 
            Default value is false.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.MapLayer">
            <summary>
            The basic layer object, which can position it's child UIElements in LatLong space
            based on the active projection.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.MapControl.WPF.MapLayer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.AddChild(System.Windows.UIElement,Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Adds an element to the layer and positions it at given Location
            </summary>
            <param name="element">The element.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.AddChild(System.Windows.UIElement,Microsoft.Maps.MapControl.WPF.Location,System.Windows.Point)">
            <summary>
            Adds an element to the layer and positions it at given Location with a offset in pixels
            </summary>
            <param name="element">The element.</param>
            <param name="location">The location.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.AddChild(System.Windows.UIElement,Microsoft.Maps.MapControl.WPF.Location,Microsoft.Maps.MapControl.WPF.PositionOrigin)">
            <summary>
            Adds an element to the layer and positions it at given Location with a specified positioning method
            </summary>
            <param name="element">The element.</param>
            <param name="location">The location.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.AddChild(System.Windows.UIElement,Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Adds an element to the layer and positions it at given LocationRect
            </summary>
            <param name="element">The element.</param>
            <param name="locationRect">The location rect.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapLayer.PositionProperty">
            <summary>
            Identifies maps position as a single Location point, acts similar to Canvas.Top and Canvas.Left
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.GetPosition(System.Windows.DependencyObject)">
            <summary>
            Gets the position dependency property of the given dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.SetPosition(System.Windows.DependencyObject,Microsoft.Maps.MapControl.WPF.Location)">
            <summary>
            Sets the position dependency property on the given dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.OnPositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When position is changed, invalidate the container's arrange.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="ea">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapLayer.PositionRectangleProperty">
            <summary>
            Identifies a LocationRectangle which is used to Arrange (fit) the given UI element into.
            The UI element should not have Width and Hight defined, instead it should
            HorizontalAlign=Stretch and VerticalAlign=Stretch. Otherwise this would behave similar to Position=Rectangles TopLeft corner.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.GetPositionRectangle(System.Windows.DependencyObject)">
            <summary>
            Gets the PositionRectangle dependency property of the given depency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The position rectangle.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.SetPositionRectangle(System.Windows.DependencyObject,Microsoft.Maps.MapControl.WPF.LocationRect)">
            <summary>
            Sets the PositionRectangle dedependency property of the given depenency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="rect">The position rectangle.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.OnPositionRectangleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When positioning rectangle is changed, invaldiate arrange and measure
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="ea">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapLayer.PositionOriginProperty">
            <summary>
            Determines how the positioning information should be used. 
            Determines where to anchor the MapLayer.Position property on a UIElement.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.GetPositionOrigin(System.Windows.DependencyObject)">
            <summary>
            Gets the PositionOrigin depenency property of the given dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The position origin.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.SetPositionOrigin(System.Windows.DependencyObject,Microsoft.Maps.MapControl.WPF.PositionOrigin)">
            <summary>
            Sets the PositionOrigin dependency property of the given dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.OnPositionOriginChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When positioning method is changed, invalidate the arrange and measure
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="ea">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapLayer.PositionOffsetProperty">
            <summary>
            Defines an offset in pixels from the position calculated by projection.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.GetPositionOffset(System.Windows.DependencyObject)">
            <summary>
            Gets the PositionOffset dependency property of the given dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The position offset.</returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.SetPositionOffset(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the PositionOffset dependency property of the given dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.OnPositionOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When positioning offset is changed, invalidate the arrange and measure
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="ea">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.MapLayer.ProjectionUpdatedTag">
            <summary>
            Private attached property for tagging the children to know when they need to be re-updated
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary> 
            Handles children being added or removed to the visual tree
            </summary> 
            <param name="childAdded">child added</param> 
            <param name="childRemoved">child removed</param> 
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.MapLayer.InvalidateParentLayout(System.Windows.DependencyObject)">
            <summary>
            Calls InvalidateMeasure and InvalidateArrange on the visual tree parent
            of dependencyObject. 
            </summary>
            <param name="dependencyObject">The dependency object.</param>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.ConfigurationNotLoadedException">
            <summary>
            Represents errors that a configuration has not finish loading.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.ConfigurationNotLoadedException.#ctor">
            <summary>
            Creates an instance of ConfigurationNotLoadedException
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.ConfigurationNotLoadedException.#ctor(System.String)">
            <summary>
            Creates an instance of ConfigurationNotLoadedException
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.Core.ConfigurationNotLoadedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of ConfigurationNotLoadedException
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.Core.BadFetchState">
            <summary>
            Class is used to keep track of failed requests.  This serves as a throttle so we
            don't make lots of repeated calls that fail.  The next fetch is only made after
            a time limit has expired or if it uses different token/app id for validation.
            </summary>
        </member>
        <member name="T:Microsoft.Maps.MapControl.WPF.AnimationDriver">
            <summary>
            Provides a simple storyboard-driven object that fires an event when its linear animation progress
            has changed.
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AnimationDriver.AnimationProgressProperty">
            <summary>
            Dependency property for the animation progress
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AnimationDriver.storyboard">
            <summary>
            Storyboard that drives the animation
            </summary>
        </member>
        <member name="F:Microsoft.Maps.MapControl.WPF.AnimationDriver.isAnimating">
            <summary>
            True if the animation is animating.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.AnimationDriver.#ctor">
            <summary>
            Initializes a new instance of the AnimationDriver class.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.AnimationDriver.Start(System.Windows.Duration)">
            <summary>
            Stops the animation if it's running and starts it with the provided duration.
            </summary>
            <param name="duration">Thre duration of the animation.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.AnimationDriver.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.AnimationDriver.OnAnimationProgressChanged(System.Object,System.EventArgs)">
            <summary>
            Fired when the AnimationProgress dependency property is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Maps.MapControl.WPF.AnimationDriver.StoryboardCompleted(System.Object,System.EventArgs)">
            <summary>
            Handler for Storyboard's Completed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.AnimationDriver.AnimationProgressChanged">
            <summary>
            Fired when the animation progress changes.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.AnimationDriver.AnimationStopped">
            <summary>
            Fired when the animation is stopped. This event is not followed by an <see cref="E:Microsoft.Maps.MapControl.WPF.AnimationDriver.AnimationCompleted"/> event.
            </summary>
        </member>
        <member name="E:Microsoft.Maps.MapControl.WPF.AnimationDriver.AnimationCompleted">
            <summary>
            Fired when the animation completes.
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.AnimationDriver.AnimationProgress">
            <summary>
            Gets the animation progress, which falls in the range [0,1].
            </summary>
        </member>
        <member name="P:Microsoft.Maps.MapControl.WPF.AnimationDriver.IsAnimating">
            <summary>
            Gets a value indicating whether animation is in progress.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
